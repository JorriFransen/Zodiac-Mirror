
_c :: import c;

std :: import std;

c_allocator :: import c_allocator;

_printer :: import print;
using _printer;

main :: ()
{
    _builtin_open_std_handles();

    ca := c_allocator.get();

    ptr, err := alloc(ca, sizeof(int) * 5, sizeof(int));
    assert(ptr);
    assert(err == Allocation_Error.NONE);
    defer _free(ca, ptr, 0);

    int_ptr := (:*int)ptr;
    for (i := 0; i < 5; i++)
    {
        int_ptr[i] = (i + 1) * 3;
    }

    ptr1, err1 := alloc(ca, 1024, 0);
    ptr2, err2 := alloc(ca, 4096 * 3, 0);
    ptr3, err3 := alloc(ca, 4096, 0);

    _free(ca, ptr1, 0);

    for (i := 0; i < 5; i++)
    {
        print("int_ptr[%] = %\n", i, int_ptr[i]);
    }

    _free(ca, ptr2, 0);
    _free(ca, ptr3, 0);

    print("sizeof(Message): %\n", sizeof(Message));

    message_test(ca);

    temp_test();

    return 0;
}

temp_allocator :: import temp_allocator;

temp_test :: ()
{
    print("\nTemp allocator...\n");

    temp_fixed_size();
    temp_auto_clear();
    temp_growable();

    print("\tDone..\n");
}

temp_growable :: ()
{
    ta := temp_allocator.create(sizeof(int) * 2, false, true);
    defer temp_allocator.free(ta);

    ip1, err1 := alloc_type(ta, int);
    ip2, err2 := alloc_type(ta, int);

    assert(err1 == Allocation_Error.NONE && err2 == Allocation_Error.NONE);

    <ip1 = 1;
    <ip2 = 2;

    ip3, err3 := alloc_type(ta, int);
    ip4, err4 := alloc_type(ta, int);

    <ip3 = 3;
    <ip4 = 4;

    assert(err3 == Allocation_Error.NONE && err4 == Allocation_Error.NONE);

    print("<ip1: %\n", <ip1);
    print("<ip2: %\n", <ip2);
    print("<ip3: %\n", <ip3);
    print("<ip4: %\n", <ip4);

    assert(<ip1 == 1);
    assert(<ip2 == 2);
    assert(<ip3 == 3);
    assert(<ip4 == 4);
}

temp_auto_clear :: ()
{
    ta := temp_allocator.create(4, true, false);
    defer temp_allocator.free(ta);

    ptrs : [4]*u8;

    for (i := 0; i < 4; i++)
    {
        ptr, err := alloc_type(ta, u8);
        assert(err == Allocation_Error.NONE);
        assert(ptr);

        <ptr = (:u8)i;

        ptrs[i] = ptr;
    }

    for (i := 0; i < 4; i++)
    {
        ptr2, err2 := alloc_type(ta, u8);
        assert(err2 == Allocation_Error.NONE);
        assert(<ptr2 == i);
        assert(ptr2);
        assert(ptrs[i] == ptr2);
    }
}

temp_fixed_size :: ()
{
    ta := temp_allocator.create(128, false, false);
    defer temp_allocator.free(ta);

    ptr : *u8;
    err : Allocation_Error = Allocation_Error.NONE;

    u8_val : u8 = 0;

    for (i := 0; i < 128; i++)
    {
        ptr, err = alloc_type(ta, u8);
        assert(ptr);
        assert(err == Allocation_Error.NONE);

        <ptr = u8_val;
        u8_val += 1;
    }

    temp_allocator.clear((:*temp_allocator.Temp_Allocator)ta);

    for (i := 0; i < 128; i++)
    {
        ptr, err = alloc_type(ta, u8);
        assert(ptr);
        assert(err == Allocation_Error.NONE);

        <ptr = u8_val;
        u8_val += 1;
    }

    ptr, err = alloc_type(ta, u8);
    assert(!ptr);
    assert(err == Allocation_Error.OUT_OF_MEMORY);
}

message_test :: (allocator: *Allocator)
{
    m0 := message_create(allocator, 0, "First message");
    defer _free(allocator, m0, 0);

    message_print(m0);
}

Message :: struct
{
    id        : u64;
    sender_id : u64;
    message   : String;
}

__next_message_id : u64 = 0;

message_create :: (ca: *Allocator, sender_id: u64, str: String) -> *Message
{
    result, err := alloc_type(ca, Message);
    assert(err == Allocation_Error.NONE);

    result.id = __next_message_id;
    __next_message_id += 1;

    result.sender_id = sender_id;

    result.message = std.string_create(ca, str);

    return result;
}

message_print :: (msg: *Message)
{
    print("%: (from: %): '%'\n", msg.id, msg.sender_id, msg.message.data);
}
