std :: import std;

main :: ()
{
    std.print("wire");
    test_lazy_and();
    test_lazy_or();
}

test_lazy_or :: ()
{
    std.print("\n\nTEST_LAZY_OR\n");

    if (false || print_and_return_true("This should be executed"))
    {
        std.print("We should get here");
    }

    if (true || print_and_return_true("This should never be executed"))
    {
        std.print("We should get here");
    }
    else assert(false);

    if (print_and_return_true("This should be executed") || true)
    {
        std.print("We should get here");
    }
    else assert(false);

    if (print_and_return_true("This should be executed") || false)
    {
        std.print("We should get here");
    }
    else assert(false);

    if (print_and_return_false("This should be executed") || true)
    {
        std.print("We should get here");
    }
    else assert(false);

    if (print_and_return_false("This should be executed") || false)
    {
        std.print("We should never get here");
        assert(false);
    }

    if (true || print_and_return_false("This should never be executed"))
    {
        std.print("We should get here");
    }
    else assert(false);

    if (false || print_and_return_false("This should be executed"))
    {
        std.print("We should never get here");
        assert(false);
    }
}

test_lazy_and :: ()
{
    std.print("\n\nTEST_LAZY_AND\n");

    if (false && print_and_return_true("This should never be executed"))
    {
        std.print("We should never get here");
        assert(false);
    }

    if (true && print_and_return_true("This should be executed"))
    {
        std.print("We should get here");
    }
    else
    {
        assert(false);
    }

    if (print_and_return_true("This should be executed") && false)
    {
        std.print("We should never get here");
        assert(false);
    }

    if (print_and_return_true("This should be executed") && true)
    {
        std.print("We should get here");
    }
    else
    {
        assert(false);
    }
}

print_and_return_true :: (str: *u8) -> bool
{
    std.print(str);
    return true;
}

print_and_return_false :: (str: *u8) -> bool
{
    std.print(str);
    return false;
}
