
io :: import io;
gl :: import gl;
glfw :: import glfw;

main :: () -> int
{
    io.printf("zodiac game\n");

    if (!glfw.glfwInit())
    {
        io.printf("glfwInit failed\n");
        return 9;
    }

    if (glfw_error()) return 8;

    width := 640;
    height := 480;

    // glfw.glfwWindowHint(glfw.GLFW_CONTEXT_VERSION_MAJOR, 2);
    // glfw.glfwWindowHint(glfw.GLFW_CONTEXT_VERSION_MINOR, 1);
    glfw.glfwWindowHint(glfw.GLFW_OPENGL_PROFILE, glfw.GLFW_OPENGL_ANY_PROFILE);
    glfw.glfwWindowHint(glfw.GLFW_RESIZABLE, glfw.GLFW_FALSE);
    if (glfw_error()) return 8;
    window := glfw.glfwCreateWindow(width, height, "Triangles!!!", null, null);
    if (glfw_error()) return 8;
    if (!window)
    {
        io.printf("glfwCreateWindow failed\n");
        return 9;
    }

    glfw.glfwMakeContextCurrent(window);
    if (glfw_error()) return 8;

    glfw.glfwSwapInterval(1);
    if (glfw_error()) return 8;

    gl_error := gl.glGetError();
    if (gl_error != gl.GL_NO_ERROR)
    {
        io.printf("gl_error: %#x\n", gl_error);
        return 8;
    }

    gl.load(*glfw.glfwGetProcAddress);
    if (glfw_error()) return 8;

    _vendor := gl._glGetString(gl.GL_VENDOR);
    io.printf("gl._glGetString: %#x\n", gl._glGetString);
    io.printf("*gl.glGetString: %#x\n", *gl.glGetString);
    // io.printf("GL _vendor: %s\n", _vendor);

    msg : *u8 = null;
    err := glfw.glfwGetError(*msg);
    if (err != glfw.GLFW_NO_ERROR)
    {
        io.printf("GLFW error: %s\n", msg);
        return 9;
    }

    // gl.glViewport(0, 0, width, height);

    vendor := gl.glGetString(gl.GL_VENDOR);
    renderer := gl.glGetString(gl.GL_RENDERER);
    version := gl.glGetString(gl.GL_VERSION);

    io.printf("GL vendor: %s\n", vendor);
    io.printf("GL renderer: %s\n", renderer);
    io.printf("GL version: %s\n", version);

    // gl.glClearColor(0.0, 1.0, 0.0, 1.0);

    // while (!glfw.glfwWindowShouldClose(window))
    // {
        // gl.glClear(gl.GL_COLOR_BUFFER_BIT);
        // // gl.glBegin(gl.GL_TRIANGLES);
        // // gl.glColor3f(1.0, 0.0, 0.0);
        // // gl.glVertex3f(0.0, 0.0, 0.0);
        // // gl.glVertex3f(0.5, 0.0, 0.0);
        // // gl.glVertex3f(0.25, 0.5, 0.0);
        // // gl.glEnd();
        // gl.glFlush();

        // glfw.glfwSwapBuffers(window);
        // glfw.glfwPollEvents();
    // }
}

glfw_error :: () -> bool
{
    msg : *u8 = null;
    err := glfw.glfwGetError(*msg);
    if (err != glfw.GLFW_NO_ERROR)
    {
        io.printf("GLFW error: %s\n", msg);
        return true;
    }

    return false;
}