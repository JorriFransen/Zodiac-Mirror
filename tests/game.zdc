
io :: import io;
glfw :: import glfw.*;
gl :: import gl.*;

main :: () -> int
{
    if (!glfwInit())
    {
        io.printf("glfwInit failed\n");
        return 9;
    }

    width := 640;
    height := 480;

    glfwWindowHint(glfw.GLFW_RESIZABLE, glfw.GLFW_FALSE);
    window : *GLFWwindow = glfwCreateWindow(width, height, "Triangles!!!", null, null);
    if (!window)
    {
        io.printf("glfwCreateWindow failed\n");
        return 9;
    }

    glfwSetKeyCallback(window, key_callback);
    glfwSetErrorCallback(error_callback);

    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);
    load(*glfwGetProcAddress);
    glViewport(0, 0, width, height);

    vendor := glGetString(GL_VENDOR);
    renderer := glGetString(GL_RENDERER);
    version := glGetString(GL_VERSION);

    io.printf("GL vendor: %s\n", vendor);
    io.printf("GL renderer: %s\n", renderer);
    io.printf("GL version: %s\n", version);

    glViewport(0, 0, width, height);

    // glClearColor(0.1, 0.3, 0.5, 1.0);
    glClearColor(0.0, 0.0, 0.0, 0.0);


    while (!glfwWindowShouldClose(window))
    {
        glClear(GL_COLOR_BUFFER_BIT);

        glBegin(GL_TRIANGLES);
        glColor4f(1.0, 0.0, 0.0, 1.0);
        glVertex2f(-0.5, -0.5);
        glColor4f(0.0, 1.0, 0.0, 1.0);
        glVertex2f(0.5, -0.5);
        glColor4f(0.0, 0.0, 1.0, 1.0);
        glVertex2f(0.0, 0.5);
        glEnd();

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}

key_callback :: (window: *glfw.GLFWwindow, key: int, scancode: int, action: int, mods: int) -> void
{
    if (key == glfw.GLFW_KEY_ESCAPE && action == glfw.GLFW_PRESS)
    {
        io.printf("Exit requested by user\n");
        glfw.glfwSetWindowShouldClose(window, glfw.GLFW_TRUE);
    }
    // switch (action)
    // {
    //     case glfw.GLFW_RELEASE:
    //         io.printf("released key: %lu\n", key);

    //     case glfw.GLFW_PRESS:
    //         io.printf("pressed key: %lu\n", key);

    //     case glfw.GLFW_REPEAT:
    //         io.printf("repeat key: %lu\n", key);

    //     default:
    //         io.printf("Unknown action: %lu, key: %lu\n", action, key);
    // }
}

error_callback :: (error: int, description: *u8) -> void
{
    io.fprintf(io.stderr, "GLFW error:%lu:s\n", error, description);
}
