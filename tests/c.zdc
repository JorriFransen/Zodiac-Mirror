static_if (PLATFORM_WINDOWS)
{
    #dynamic_link "msvcrt.dll";
    #foreign _fdopen :: (fd: int, mode: *u8) -> *FILE;
    fdopen :: (fd: int, mode: *u8) -> *FILE { return _fdopen(fd, mode); }

    #dynamic_link "Kernel32.dll";
    #foreign Sleep :: (msec: int) -> void;
    _msleep :: (msec: int) { Sleep(msec); }
}
else static_if (PLATFORM_LINUX)
{
    #dynamic_link "libc.so.6";
    #dynamic_link "libm.so.6";
    #foreign fdopen :: (fd: int, mode: *u8) -> *FILE;

    #foreign usleep :: (usec: int) -> int;
    _msleep :: (msec: int) { usleep(usec * 1000); }
}
else
{
    static_assert(false);
}

FILE :: typedef *void;

stdin  : *FILE = null;
stdout : *FILE = null;
stderr : *FILE = null;

#foreign putchar :: (x: int) -> int;
#foreign getchar :: () -> int;
#foreign puts :: (string: *u8) -> int;
#foreign printf :: (format: *u8, ...) -> int;
#foreign fprintf :: (file: *FILE, format: *u8, ...) -> int;
#foreign sprintf :: (buffer: *u8, format: *u8, ...) -> int;

#foreign strlen :: (str: *u8) -> u64;

#foreign malloc :: (size: u64) -> *void;
#foreign free   :: (mem: *void);
#foreign memcpy :: (dest: *void, source: *void, count: u64) -> *void;
#foreign memset :: (ptr: *void, value: int, num: u64) -> *void;
#foreign memmove :: (dest: *void, source: *void, num: u64) -> *void;

#foreign sqrt :: (x: double) -> double;
#foreign sinf :: (x: float) -> float;
#foreign cosf :: (x: float) -> float;

#foreign time   :: (timer: *int) -> int;

open_std_handles :: () -> void
{
    stdin = fdopen(0, "r");
    stdout = fdopen(1, "w");
    stderr = fdopen(2, "w");
}
