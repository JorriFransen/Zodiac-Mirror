
_c :: import c;
using _c;

main :: () -> int
{
    open_std_handles();

    // printf("varargs test\n");

    printf("type_info(int)  : %p\n", get_type_info(int));
    printf("type_info(float): %p\n", get_type_info(float));
    printf("type_info(*u8)  : %p\n", get_type_info(*u8));
    printf("\n");

    test_func({ null, 0 });
    // an1 : Any = 1;
    // an2 : Any = 2;
    // anf1 : Any = 1.1;
    // anf2 : Any = 2.2;

    // a1 : [4]Any;
    // a1 = { an1, an2,  anf1, anf2 }


    vararg_func("1", 1);
    // vararg_func("3", 4, 5, 6.6);
    // vararg_func("7", "89");

    return 0;
}

test_func :: (args: Array_Ref(Any))
{
    printf("args.count: %d\n", args.count);
    printf("args.data: %p\n", args.data);

    for (i := 0; i < args.count; i++)
    {
        any := args.data[i]
        printf("\targs[%d].type_info: %p\n", i, any.type_info);
    }

    printf("\n");
}

vararg_func :: (prefix: String, v: ...)
{
    printf("Calling vararg_func with prefix: %s\n", prefix.data);

    for (i := 0; i < v.count; i++)
    {
        any := v.data[i];
        printf("any.type_info: %p\n", any.type_info);
        if (any.type_info)
            printf("any.type_info.kind: %u\n", any.type_info.kind);
        // printf("v[%d]: ", i);

        // switch (any.type_info.kind)
        // {
        //     case Type_Info_Kind.BASE:
        //     {
        //         if (any.type_info.flags & Type_Info_Flags.INT)
        //         {
        //             printf("INT!\n");
        //         }
        //         else
        //         {
        //             printf("FLOAT!\n");
        //         }
        //     }

        //     case Type_Info_Kind.POINTER:
        //     {
        //         printf("POINTER\n");
        //     }

        //     default: assert(false);
        // }
    }

    printf("\n");
}
