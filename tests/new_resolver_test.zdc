
std :: import std;
_c :: import c;

using _c;

_print_module :: import print;
using _print_module;

Vec2 :: struct
{
    x : float;
    y : float;
}

State :: enum
{
    INVALID;
    PLAYING;
    PAUSED;
    MAIN_MENU;
    SETTINGS_MENU;
    GRAPHICS_MENU;
}

Custom_State :: enum
{
    INVALID :: -1;
    PLAYING;
    PAUSED;

    MENU_FIRST :: 100;
        MAIN_MENU :: MENU_FIRST;
        SETTINGS_MENU;
        GRAPHICS_MENU;
    MENU_LAST :: GRAPHICS_MENU;
}


Menu :: enum
{
    FIRST :: MAIN;
        MAIN;
        SETTINGS;
        GRAPHICS;
    LAST :: GRAPHICS;
}

global_mutable : u64 = 41;
GLOBAL_CONSTANT : u64 : 43;

main :: () -> int
{
    _c.open_std_handles();

    print("new_resolver_test\n");
    print("using test\n");

    print(global_mutable);
    print(GLOBAL_CONSTANT);

    // print("x: %\n", x);
    x : int = 4;

    print("x: %\n", x);

    x = x + 8;

    print("x: %\n", x);

    print("sizeof(Vec2): %\n", sizeof(Vec2));

    v : Vec2;
    print("v: "); print_vec2(v);

    v.x = 1;
    v.y = 2;
    print("v: "); print_vec2(v);

    v = { 3, 4 };
    print("v: "); print_vec2(v);

    v2 : Vec2 = { 4, 5 };
    print("v2: "); print_vec2(v2);

    print("*v: "); print_vec2p(*v);
    print("*v2: "); print_vec2p(*v2);

    b : bool = false;

    if (!b && false)
    {
        print("b = true\n");
    }
    else
    {
        print("b = false\n");
    }

    using State;
    print("State.INVALID:       %\n", State.INVALID);
    print("State.PLAYING:       %\n", PLAYING);
    print("State.PAUSED:        %\n", State.PAUSED);
    print("State.MAIN_MENU:     %\n", State.MAIN_MENU);
    print("State.SETTINGS_MENU: %\n", State.SETTINGS_MENU);
    print("State.GRAPHICS_MENU: %\n", State.GRAPHICS_MENU);

    print("Custom_State.INVALID:       %\n", Custom_State.INVALID);
    print("Custom_State.PLAYING:       %\n", Custom_State.PLAYING);
    print("Custom_State.PAUSED:        %\n", Custom_State.PAUSED);
    print("Custom_State.MENU_FIRST:    %\n", Custom_State.MENU_FIRST);
    print("Custom_State.MAIN_MENU:     %\n", Custom_State.MAIN_MENU);
    print("Custom_State.SETTINGS_MENU: %\n", Custom_State.SETTINGS_MENU);
    print("Custom_State.GRAPHICS_MENU: %\n", Custom_State.GRAPHICS_MENU);
    print("Custom_State.MENU_LAST:     %\n", Custom_State.MENU_LAST);

    print("Menu.FIRST:    %d\n", Menu.FIRST);
    print("Menu.MAIN:     %d\n", Menu.MAIN);
    print("Menu.SETTINGS: %d\n", Menu.SETTINGS);
    print("Menu.GRAPHICS: %d\n", Menu.GRAPHICS);
    print("Menu.LAST:     %d\n", Menu.LAST);

    ps_int : Poly_Struct(int, *u8);
    ps_int.name = "ps_int";
    ps_int.key = 3;
    ps_int.value = "Three";


    ps_int2 : Poly_Struct(int, *u8);
    ps_int2.name = "ps_int2";
    ps_int2.key = 6;
    ps_int2.value = "Six";

    print("ps_int: %, %, %\n", ps_int.name, ps_int.key, ps_int.value);
    print("ps_int2: %, %, %\n", ps_int2.name, ps_int2.key, ps_int2.value);

    ps_int2 = ps_int;
    print("ps_int: %, %, %\n", ps_int.name, ps_int.key, ps_int.value);
    print("ps_int2: %, %, %\n", ps_int2.name, ps_int2.key, ps_int2.value);

    ps_float : Poly_Struct(float, *u8);
    ps_float.name = "ps_float";
    ps_float.key = 3.3;
    ps_float.value = "Three point three";

    print("ps_float: %, %, %\n", ps_float.name, ps_float.key, ps_float.value);

    ps_vec2 : Poly_Struct(Vec2, *u8);
    ps_vec2.name = "ps_vec2";
    ps_vec2.key = { 1.1, 2.2 };
    ps_vec2.value = "{ x: 1.1, y: 2.2 }";

    print("ps_vec2: %, %,%, %\n", ps_vec2.name, ps_vec2.key.x, ps_vec2.key.y, ps_vec2.value);

    print("sizeof(typeof(ps_int)): %\n", sizeof(typeof(ps_int)));
    print("sizeof(typeof(ps_float)): %\n", sizeof(typeof(ps_float)));
    print("sizeof(typeof(ps_vec2)): %\n", sizeof(typeof(ps_vec2)));

    poly_print(1);
    poly_print(2.3);
    poly_print(*ps_vec2);
    poly_print(5);
    poly_print(7.12);
    poly_print(*ps_float);

    nest_test();

    return 0;
}

TLS :: struct {

    x : int;

    nested :: struct {
        x : int;
    }
}

nest_test :: ()
{
    t : TLS;
    t.x = 1;
    t.nested.x = 4;

    print("t.x: %\n", t.x);
    print("t.nested.x: %\n", t.nested.x);
}

print_vec2 :: (v: Vec2)
{
    print("{ %, % }\n", v.x, v.y);
}

print_vec2p :: (v: *Vec2)
{
    print("*{ %, % }\n", v.x, v.y);
}

Poly_Struct :: struct(K, V)
{
    name : *u8;
    key : K;
    value : V;
}

poly_print :: (value: $T) -> void
{
    print("%, %, %\n", value, value, value);
}
