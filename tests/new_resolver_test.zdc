
std :: import std;
_c :: import c;

using _c;

Vec2 :: struct
{
    x : float;
    y : float;
}

State :: enum
{
    INVALID;
    PLAYING;
    PAUSED;
    MAIN_MENU;
    SETTINGS_MENU;
    GRAPHICS_MENU;
}

Custom_State :: enum
{
    INVALID :: -1;
    PLAYING;
    PAUSED;

    MENU_FIRST :: 100;
        MAIN_MENU :: MENU_FIRST;
        SETTINGS_MENU;
        GRAPHICS_MENU;
    MENU_LAST :: GRAPHICS_MENU;
}


Menu :: enum
{
    FIRST :: MAIN;
        MAIN;
        SETTINGS;
        GRAPHICS;
    LAST :: GRAPHICS;
}

global_mutable : u64 = 41;
GLOBAL_CONSTANT : u64 : 43;

main :: () -> int
{
    _c.printf("new_resolver_test\n");
    printf("using test\n");

    std.print(global_mutable);
    std.print(GLOBAL_CONSTANT);

    // printf("x: %d\n", x);
    x : int = 4;

    printf("x: %d\n", x);

    x = x + 8;

    printf("x: %d\n", x);

    printf("sizeof(Vec2): %d\n", sizeof(Vec2));

    v : Vec2;
    printf("v: "); print_vec2(v);

    v.x = 1;
    v.y = 2;
    printf("v: "); print_vec2(v);

    v = { 3, 4 };
    printf("v: "); print_vec2(v);

    v2 : Vec2 = { 4, 5 };
    printf("v2: "); print_vec2(v2);

    printf("*v: "); print_vec2p(*v);
    printf("*v2: "); print_vec2p(*v2);

    b : bool = false;

    if (!b && false)
    {
        printf("b = true\n");
    }
    else
    {
        printf("b = false\n");
    }

    using State;
    printf("State.INVALID:       %d\n", State.INVALID);
    printf("State.PLAYING:       %d\n", PLAYING);
    printf("State.PAUSED:        %d\n", State.PAUSED);
    printf("State.MAIN_MENU:     %d\n", State.MAIN_MENU);
    printf("State.SETTINGS_MENU: %d\n", State.SETTINGS_MENU);
    printf("State.GRAPHICS_MENU: %d\n", State.GRAPHICS_MENU);

    printf("Custom_State.INVALID:       %d\n", Custom_State.INVALID);
    printf("Custom_State.PLAYING:       %d\n", Custom_State.PLAYING);
    printf("Custom_State.PAUSED:        %d\n", Custom_State.PAUSED);
    printf("Custom_State.MENU_FIRST:    %d\n", Custom_State.MENU_FIRST);
    printf("Custom_State.MAIN_MENU:     %d\n", Custom_State.MAIN_MENU);
    printf("Custom_State.SETTINGS_MENU: %d\n", Custom_State.SETTINGS_MENU);
    printf("Custom_State.GRAPHICS_MENU: %d\n", Custom_State.GRAPHICS_MENU);
    printf("Custom_State.MENU_LAST:     %d\n", Custom_State.MENU_LAST);

    printf("Menu.FIRST:    %d\n", Menu.FIRST);
    printf("Menu.MAIN:     %d\n", Menu.MAIN);
    printf("Menu.SETTINGS: %d\n", Menu.SETTINGS);
    printf("Menu.GRAPHICS: %d\n", Menu.GRAPHICS);
    printf("Menu.LAST:     %d\n", Menu.LAST);

    ps_int : Poly_Struct(int, *u8);
    ps_int.name = "ps_int";
    ps_int.key = 3;
    ps_int.value = "Three";


    ps_int2 : Poly_Struct(int, *u8);
    ps_int2.name = "ps_int2";
    ps_int2.key = 6;
    ps_int2.value = "Six";

    printf("ps_int: %s, %d, %s\n", ps_int.name, ps_int.key, ps_int.value);
    printf("ps_int2: %s, %d, %s\n", ps_int2.name, ps_int2.key, ps_int2.value);

    ps_int2 = ps_int;
    printf("ps_int: %s, %d, %s\n", ps_int.name, ps_int.key, ps_int.value);
    printf("ps_int2: %s, %d, %s\n", ps_int2.name, ps_int2.key, ps_int2.value);

    ps_float : Poly_Struct(float, *u8);
    ps_float.name = "ps_float";
    ps_float.key = 3.3;
    ps_float.value = "Three point three";

    printf("ps_float: %s, %f, %s\n", ps_float.name, ps_float.key, ps_float.value);

    ps_vec2 : Poly_Struct(Vec2, *u8);
    ps_vec2.name = "ps_vec2";
    ps_vec2.key = { 1.1, 2.2 };
    ps_vec2.value = "{ x: 1.1, y: 2.2 }";

    printf("ps_vec2: %s, %f,%f, %s\n", ps_vec2.name, ps_vec2.key.x, ps_vec2.key.y, ps_vec2.value);

    printf("sizeof(typeof(ps_int)): %d\n", sizeof(typeof(ps_int)));
    printf("sizeof(typeof(ps_float)): %d\n", sizeof(typeof(ps_float)));
    printf("sizeof(typeof(ps_vec2)): %d\n", sizeof(typeof(ps_vec2)));

    poly_print(1);
    poly_print(2.3);
    poly_print(*ps_vec2);
    poly_print(5);
    poly_print(7.12);
    poly_print(*ps_float);

    nest_test();

    return 0;
}

TLS :: struct {

    x : int;

    nested :: struct {
        x : int;
    }
}

nest_test :: ()
{
    t : TLS;
    t.x = 1;
    t.nested.x = 4;

    printf("t.x: %d\n", t.x);
    printf("t.nested.x: %d\n", t.nested.x);
}

print_vec2 :: (v: Vec2)
{
    printf("{ %f, %f }\n", v.x, v.y);
}

print_vec2p :: (v: *Vec2)
{
    printf("*{ %f, %f }\n", v.x, v.y);
}

Poly_Struct :: struct(K, V)
{
    name : *u8;
    key : K;
    value : V;
}

poly_print :: (value: $T) -> void
{
    printf("%d, %f, %p\n", value, value, value);
}
