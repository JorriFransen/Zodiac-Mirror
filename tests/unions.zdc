
std :: import std;
using std;

_printer :: import print;
using _printer;

Value :: union
{
    uint64 : u64;
    int64  : int;
    real64 : double;
}

Value2 :: union(T)
{
    uint64 : u64;
    int64  : int;
    real64 : double;
    thing  : T;
}

Vec3 :: struct
{
    x: float;
    y: float;
    z: float
}

Top_Level :: struct
{
    x : int;
    nested :: struct
    {
        y: int;
        z: int
    }

    w : int;

    nested2 :: struct
    {
        xf : float;
        yf : float;

        nested_nested :: struct
        {
            zf : float;
            wf : float;

            union
            {
                integer : int;
                real64  : double;
            }
        }
    }

    value :: union
    {
        int64  : int;
        uint64 : u64;
        r32    : float;
        r64    : double;
    }

    struct
    {
        anon_nested_int : int;
        anon_nested_float : float;
        str : String;
    }
}

main :: () -> u64
{
    _c.open_std_handles();

    print("union test");

    print("sizeof(Top_Level) = %\n", sizeof(Top_Level));

    print("sizeof(Value) = %\n", sizeof(Value));
    print("sizeof(Value2(float)) = %\n", sizeof(Value2(float)));

    print("\n");

    tl : Top_Level;
    tl.x = 11;
    tl.nested.y = 22;
    tl.nested.z = 33;
    tl.w = 44;
    tl.nested2.xf = 1.2;
    tl.nested2.yf = 3.4;
    tl.nested2.nested_nested.zf = 5.6;
    tl.nested2.nested_nested.wf = 7.8;

    tl.nested2.nested_nested.integer = 1234;
    print("tl.nested2.nested_nested.integer = %\n", tl.nested2.nested_nested.integer);
    print("tl.nested2.nested_nested.real64 = %\n", tl.nested2.nested_nested.real64);
    tl.nested2.nested_nested.real64 = 12.34;
    print("tl.nested2.nested_nested.integer = %\n", tl.nested2.nested_nested.integer);
    print("tl.nested2.nested_nested.real64 = %\n", tl.nested2.nested_nested.real64);

    print("\n");

    tl.anon_nested_int = 55;
    tl.anon_nested_float = 66.77;
    print("tl.anon_nested_int = %\n", tl.anon_nested_int);
    print("tl.anon_nested_float = %\n", tl.anon_nested_float);

    print("\n");

    tl.value.int64 = -4;
    print("tl.value: %, %, %, %\n", tl.value.int64,
              tl.value.uint64, tl.value.r32, tl.value.r64);
    tl.value.r32 = -4;
    print("tl.value: %, %, %, %\n", tl.value.int64,
              tl.value.uint64, tl.value.r32, tl.value.r64);

    print("tl: x = %, y = %, z = %, w = %\n\txf = %, yf = %, zf = %, wf = %\n",
              tl.x, tl.nested.y, tl.nested.z, tl.w,
              tl.nested2.xf, tl.nested2.yf,
              tl.nested2.nested_nested.zf, tl.nested2.nested_nested.wf);

    print("\n");

    value1 : Value;
    value1.uint64 = 888;

    value2 : Value;
    value2.int64 = -888;

    value3 : Value;
    value3.real64 = 88.88;

    print_value("value1", value1);
    print_value("value2", value2);
    print_value("value3", value3);

    value4 : Value2(float);
    value4.thing = 99.99;

    value5 : Value2(double);
    value5.thing = 55.55;

    value6 : Value2(Vec3);
    value6.thing = { 1.1, 2.2, 3.3 };

    print_value("value4", value4);
    print_value("value5", value5);
    print_value("value6", value6);


    nt : Nest_Test;
    nt.n1 = 1;
    nt.s1.n2 = 2;
    nt.s1.s2.n3 = 3;
    nt.s1.s2.n4 = 4;
    // nt.s1.s2.f4 = 4.4;
    // nt.s1.s2.n5 = 5;
    // nt.s1.s2.f5 = 5.5;

    print("nt.n1: %\n", nt.n1);
    print("nt.s1.n2: %\n", nt.s1.n2);
    print("nt.s1.s2.n3: %\n", nt.s1.s2.n3);
    print("nt.s1.s2.n4: %\n", nt.s1.s2.n4);
    print("nt.s1.s2.n4: %\n", nt.s1.s2.f4);

    return 0;
}

Nest_Test :: struct
{
    n1 : int;
    s1 :: struct
    {
        n2: int
        s2 :: struct
        {
            n3 : int;
            union
            {
                n4 : int;
                f4 : double;

                // union
                // {
                //     n5: int;
                //     f5: double;
                // }
            }
        }
    }
}



print_value :: (name: *u8, value: Value2($T))
{
    print("%: %, %, %\n", name, value.uint64, value.int64, value.real64);
    print("\tthing: %, %, %\n", (:int)value.thing, (:float)value.thing,
              (:double)value.thing);
}


// print_value :: (name: *u8, value: Value2(Vec3))
// {
//     print("%s: %lu, %ld, %f\n", name, value.uint64, value.int64, value.real64);
//     print("\tthing: %f, %f, %f\n", value.thing.x, value.thing.y, value.thing.z);
// }

print_value :: (name: *u8, value: Value)
{
    print("%: %, %, %\n", name, value.uint64, value.int64, value.real64);
}



