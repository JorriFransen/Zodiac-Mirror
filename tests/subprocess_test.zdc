
_c :: import c;
using _c;

_printer :: import print;
using _printer;

os :: import os;
process :: os.process;

main :: ()
{
    open_std_handles();
    print("Subprocess test\n");

    err := process.Execute_Error.NONE;
    res : process.Execute_Result;

    {
        err, res = process.execute_shell("tp", "");
        assert(err == process.Execute_Error.NONE);
        defer process.execute_result_free(*res);
        _c.printf("process.execute_process returned: %d\n", res.exit_code);
        // assert(res.exit_code == 7);

        if (res.stdout.length) print("\nSTDOUT: \n%\n", res.stdout.data);
        if (res.stderr.length) print("\nSTDERR: \n%\n", res.stderr.data);
    }

    {
        err, res = process.execute("fossil", "help")
        assert(err == process.Execute_Error.NONE);
        defer process.execute_result_free(*res);
        _c.printf("process.execute_process returned: %d\n", res.exit_code);

        if (res.stdout.length) print("\nSTDOUT: \n%\n", res.stdout.data);
        if (res.stderr.length) print("\nSTDERR: \n%\n", res.stderr.data);
    }

    {
        static_if(PLATFORM_LINUX) err, res = process.execute("echo", "Hello world!");
        else                      err, res = process.execute_shell("echo", "Hello World!");
        assert(err == process.Execute_Error.NONE);
        defer process.execute_result_free(*res);
        _c.printf("process.execute_process returned: %d\n", res.exit_code);

        if (res.stdout.length) print("\nSTDOUT: \n%\n", res.stdout.data);
        if (res.stderr.length) print("\nSTDERR: \n%\n", res.stderr.data);
    }

    {
        static_if (PLATFORM_LINUX)
            err, res = process.execute("sh", "-c", ">&2 echo \"Echo to stderr!!!\"");
        else
            err, res = process.execute("cmd", "/c", "echo Echo to stderr!!! >&2");

        assert(err == process.Execute_Error.NONE);
        defer process.execute_result_free(*res);
        _c.printf("process.execute_process returned: %d\n", res.exit_code);

        if (res.stdout.length) print("\nSTDOUT: \n%\n", res.stdout.data);
        if (res.stderr.length) print("\nSTDERR: \n%\n", res.stderr.data);
    }

    {
        err, res = process.execute_shell(">&2 echo", "Echo to stderr via shell...");
        assert(err == process.Execute_Error.NONE);
        defer process.execute_result_free(*res);
        _c.printf("process.execute_process returned: %d\n", res.exit_code);

        if (res.stdout.length) print("\nSTDOUT: \n%\n", res.stdout.data);
        if (res.stderr.length) print("\nSTDERR: \n%\n", res.stderr.data);
    }

    return 0;
}

