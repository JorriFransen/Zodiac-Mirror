
_c :: import c;
using _c;

_printer :: import print;
using _printer;

posix :: import posix;

os_linux :: import os_linux;
using os_linux;

main :: ()
{
    open_std_handles();

    print("Subprocess test\n");

    res := execute_process("./tp", "");
    _c.printf("execute_process returned: %d\n", res);
    assert(res == 7);

    res = execute_process("ls", "-la");
    _c.printf("execute_process returned: %d\n", res);

    return 0;
}

execute_process :: (command: String, args: ...) -> u32
{
    pipe_err : IO_Error;
    in       : Pipe;
    out      : Pipe;
    err      : Pipe;

    pipe_err, in = pipe_create();
    if (pipe_err != IO_Error.NONE) return -1;
    defer pipe_close(*in);

    pipe_err, out = pipe_create();
    if (pipe_err != IO_Error.NONE) return -1;
    defer pipe_close(*out);

    pipe_err, err = pipe_create();
    if (pipe_err != IO_Error.NONE) return -1;
    defer pipe_close(*err);

    pid := posix.fork();

    if (pid == 0)
    {
        _args : std.Array(*u8) = { null, 0, 0 };
        defer std.array_free(*_args);

        std.array_add(*_args, "sh");
        std.array_add(*_args, "-c");
        std.array_add(*_args, command.data);
        for (i := 0; i < args.count; i++)
        {
            arg_any := args[i];
            assert(arg_any.type_info == get_type_info(*u8));
            arg_val := <((:**u8)arg_any.value)
            std.array_add(*_args, arg_val);
        }
        std.array_add(*_args, null);

        // _c.fprintf(stdout, "Executing command: \"");
        // for (i := 0; i < _args.count; i++) _c.fprintf(stdout, "%s ", _args[i]);
        // _c.fprintf(stdout, "\"\n");
        // _c.fflush(stdout);

        pipe_close_write(*in);
        pipe_close_read(*out);
        pipe_close_read(*err);

        posix.dup2(in.read_fd, posix.STDIN_FILENO);
        posix.dup2(out.write_fd, posix.STDOUT_FILENO);
        posix.dup2(err.write_fd, posix.STDERR_FILENO);

        pipe_close_read(*in);
        pipe_close_write(*out);
        pipe_close_write(*err);

        exec_res := posix.execv("/bin/sh", _args.data);

        if (exec_res == -1)
        {
            _c.fprintf(stderr, "Command execution failed: \"sh -c %s\"\n", command.data);
            assert(false);
        }

        posix._exit(1);
    }
    else if (pid > 0)
    {
        pipe_close_read(*in);
        pipe_close_write(*out);
        pipe_close_write(*err);

        buf : [1024]u8;
        readc : s32;

        status : u32 = 0;
        wait_res := posix.wait(*status);
        assert(wait_res == pid);
        assert(posix.WIFEXITED(status));

        reading := true;
        while (reading)
        {
            readc = posix.read(out.read_fd, *buf, (:s32)array_length(buf));
            assert(readc >= 0);
            _c.printf("%.*s", readc, *buf);
            if (readc <= 0) reading = false;
        }

        reading = true;
        while (reading)
        {
            readc = posix.read(err.read_fd, *buf, (:s32)array_length(buf));
            assert(readc >= 0);
            _c.printf("%.*s", readc, *buf);
            if (readc <= 0) reading = false;
        }

        return posix.WEXITSTATUS(status);
    }
    else
    {
        assert(false);
        return -1;
    }

    assert(false);
    return -2;
}
