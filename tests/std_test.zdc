
std :: import std;
using std;

_printer :: import print;
using _printer;

main :: ()
{
    // assert(false);
    _c.open_std_handles();
    // assert(false);
    // test_stringabc : String = "test string";

    print("Print test with auto converted string literal\n");

    es : String = { null, 0 };
    num_str : String = { "1234", 4 };

    es2 := get_empty_string();
    num_str2 := get_num_string();

    print("%\n", es);
    print("%\n", num_str);
    print("%\n", es2);
    print("%\n", num_str2);


    name := "Jorri Fransen";
    me : Person = { { name, _c.strlen(name) }, 23, 1 };
    print_person_and_thing(me, 1);
    print_person_and_thing(me, *me);

    pet_name := "Josh";
    pet : Pet = { { pet_name, _c.strlen(pet_name) }, 3, *me };
    print_person_and_thing(pet, 2);
    print_person_and_thing(pet, *me);
    print_person_and_thing(pet, *pet);

    print("");

    print("add(1, 2): %\n", add(1, 2));
    print("add(4, 8): %\n", add(4, 8));
    print("add(1.2, 3.4): %\n", add(1.2, 3.4));

    print("\n");

    c_string := "This is a test string";
    print("%\n", std.string_length("abc"));
    test_str : String = { c_string, _c.strlen(c_string) };

    print("test_str.length: %\n", test_str.length);
    print("test_str[2]: '%'\n", test_str[2]);

    // test_str_ptr := *test_str;
    // print("test_str_ptr[2]: '%c'\n", test_str_ptr[2]);

    print("%\n", test_str);

    // print({ "This should work as well", 5 });
    print("This should work as well\n");
    print(c_string);

    print(" ");

    int_array : Array(int) = { null, 0, 0 };
    float_array : Array(float) = { null, 0, 0 };
    int_array2 : Array(int) = { null, 0, 0 };

    // int_array = 3;

    for (i : u64 = 0; i < 5; i += 1)
    {
        j := i + 1;
        array_add(*int_array, (:int)(j * j));
        array_add(*int_array2, (:int)(j + j));
        array_add(*float_array, (:float)(j * j) / 3.0);
    }

    for (i : s64 = 0; i < int_array.count; i += 1)
    {
        print("int_array[%]: %\n", i, int_array[i]);
        array_add(*int_array2, int_array[i]);
    }

    print("\n");

    array_remove_unordered(*float_array, 0);
    print("float_array.count: %\n", float_array.count);

    for (i : s64 = 0; i < float_array.count; i += 1)
    {
        print("float_array[%]: %\n", i, float_array[i]);
        array_add(*int_array2, (:int)float_array[i]);
    }

    print("\n");

    for (i : s64 = 0; i < int_array2.count; i += 1)
    {
        print("int_array2[%]: %\n", i, int_array2[i]);
    }

    print("\n");

    // int_array_ptr := *int_array;
    // print("int_array_ptr[2]: %d\n", int_array_ptr[2]);

    // float_array_ptr := *float_array;
    // print("float_array_ptr[3]: %f\n", float_array_ptr[3]);

    array_free(*int_array);
    array_free(*int_array2);
    array_free(*float_array);

    print("\n");

    var := 5;
    var += 3;
    print("var: %\n", var);
    var += var;
    print("var: %\n", var);
    var *= 3;
    print("var: %\n", var);
    var -= 7;
    print("var: %\n", var);

    print("\n");

    post_inc_test := 4;
    print(post_inc_test++);
    print(post_inc_test--);
    print(post_inc_test);

    queue_test();
    print("\n");
    test_align_forward();

    print("abc\ndef\tghi\n\0jkl");

    return 0;
}

queue_test :: ()
{
    print("\n");

    q : std.Queue(u64);
    queue_init(*q, 4);
    defer queue_free(*q);

    for (i := 0; i < 10; i++)
    {
        queue_enqueue(*q, (:u64)i);
    }

    for (i : u64 = 0; i < 5; i++)
    {
        dq := queue_dequeue(*q);
        // assert(dq == i);
        print("dequeued: %\n", dq);
    }

    for (i : u64 = 20; i < 35; i++)
    {
        queue_enqueue(*q, i);
    }

    for (i : u64 = 5; i < 10; i++)
    {
        dq := queue_dequeue(*q);
        // assert(dq == i);
        print("dequeued: %\n", dq);
    }

    for (i : u64 = 20; i < 35; i++)
    {
        dq := queue_dequeue(*q);
        // assert(dq == i);
        print("dequeued: %\n", dq);
    }

    print("\n");

    pq : std.Queue(*u64);
    queue_init(*pq, 4);
    defer queue_free(*pq);

    arr : [4]u64 = { 1, 2, 64, 4 };

    for (i := 0; i < array_length(arr); i++)
    {
        p := *arr[i];
        queue_enqueue(*pq, (:*u64)p);
        print("enqueued: % (%)\n", p, <p);
    }

    print("\n");

    for (i := 0; i < array_length(arr); i++)
    {
        ip := queue_dequeue(*pq);
        print("dequeued: % (%)\n", ip, <ip);
        assert(<ip == arr[i]);
    }

    my_int := 4;
    my_int_ptr := *my_int;
    print("<my_int_ptr = %\n", <my_int_ptr);
}

add :: (a: $T, b: T) -> T
{
    return a + b;
}

Person :: struct
{
    name: String;
    age: u32;
    id : u32;
}

Pet :: struct
{
    name: String;
    age: u32;
    owner: *Person;
}

print_person_and_thing :: (person: Person, thing: $T)
{
    print("print_person_and_thing\n");
    print("  name: %\n", person.name.data);
    print("  thing: %\n", thing);
}

print_person_and_thing :: (pet: Pet, thing: $T)
{
    print("print_person_and_thing (but person is a pet)\n");
    print("  name: %\n", pet.name.data);
    print("  owner: %\n", pet.owner);
    print("  thing: %\n", thing);
    // assert(false);
}

test_align_forward  :: ()
{
    print("test_align_forward\n");

    stack_value : u8;
    ptr : *u8 = *stack_value;

    print("ptr: %\n", ptr);

    for (j : u64 = 0; j < 16; j++)
    {
        print("ptr + %\n", j);
        for (i : u64 = 1; i <= 64; i*=2)
        {
            aligned := align_forward(ptr, i);
            aligned_b := align_forward_b(ptr, i);
            print("\taligned: %, 0x%, 0x%\n",
                  i,
                  format_int(aligned, 0, 16),
                  format_int(aligned_b, 0, 16));
            assert((:u64)aligned == (:u64)aligned_b);
        }
        ptr += 1;
    }
}

get_empty_string :: () -> String
{
    // Default return should be empty string, this function is here for testing this.
}

get_num_string :: () -> String
{
    result : String = { "12345", 5 };
    return result;
}
