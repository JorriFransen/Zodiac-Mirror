
std :: import std;
using std;

main :: ()
{
    // test_stringabc : String = "test string";

    // printf("test\n");

    _c.printf("DEFAULT_ALIGNMENT: %d\n", std.DEFAULT_ALIGNMENT);

    name := "Jorri Fransen";
    me : Person = { { name, _c.strlen(name) }, 23, 1 };
    print_person_and_thing(me, 1);
    print_person_and_thing(me, *me);

    pet_name := "Josh";
    pet : Pet = { { pet_name, _c.strlen(pet_name) }, 3, *me };
    print_person_and_thing(pet, 2);
    print_person_and_thing(pet, *me);
    print_person_and_thing(pet, *pet);

    print(" ");

    _c.printf("add(1, 2): %d\n", add(1, 2));
    _c.printf("add(4, 8): %d\n", add(4, 8));
    _c.printf("add(1.2, 3.4): %f\n", add(1.2, 3.4));

    print(" ");

    c_string := "This is a test string";
    print(std.string_length("abc"));
    test_str : String = { c_string, _c.strlen(c_string) };

    _c.printf("test_str.length: %llu\n", test_str.length);
    _c.printf("test_str[2]: '%c'\n", test_str[2]);

    test_str_ptr := *test_str;
    _c.printf("test_str_ptr[2]: '%c'\n", test_str_ptr[2]);

    print(test_str);

    print({ "This should work as well", 5 });
    print("This should work as well");
    print(c_string);

    print(" ");

    int_array : Array(int);
    float_array : Array(float);
    int_array2 : Array(int);

    for (i : u64 = 0; i < 5; i += 1)
    {
        j := i + 1;
        array_add(*int_array, (:int)(j * j));
        array_add(*int_array2, (:int)(j + j));
        array_add(*float_array, j * j / 3.0);
    }

    for (i : u64 = 0; i < int_array.count; i += 1)
    {
        _c.printf("int_array[%d]: %d\n", i, int_array[i]);
        array_add(*int_array2, int_array[i]);
    }

    print(" ");

    for (i : u64 = 0; i < float_array.count; i += 1)
    {
        _c.printf("float_array[%d]: %f\n", i, float_array[i]);
        array_add(*int_array2, (:int)float_array[i]);
    }

    print(" ");

    for (i : u64 = 0; i < int_array2.count; i += 1)
    {
        _c.printf("int_array2[%d]: %d\n", i, int_array2[i]);
    }

    print(" ");

    int_array_ptr := *int_array;
    _c.printf("int_array_ptr[2]: %d\n", int_array_ptr[2]);

    float_array_ptr := *float_array;
    _c.printf("float_array_ptr[3]: %f\n", float_array_ptr[3]);

    array_free(*int_array);
    array_free(*int_array2);
    array_free(*float_array);

    print(" ");

    var := 5;
    var += 3;
    _c.printf("var: %d\n", var);
    var += var;
    _c.printf("var: %d\n", var);
    var *= 3;
    _c.printf("var: %d\n", var);
    var -= 7;
    _c.printf("var: %d\n", var);

    print(" ");

    post_inc_test := 4;
    print(post_inc_test++);
    print(post_inc_test--);
    print(post_inc_test);
}

add :: (a: $T, b: T) -> T
{
    return a + b;
}

Person :: struct
{
    name: String;
    age: u32;
    id : u32;
}

Pet :: struct
{
    name: String;
    age: u32;
    owner: *Person;
}

print_person_and_thing :: (person: Person, thing: $T)
{
    print("print_person_and_thing");
    _c.printf("  name: %s\n", person.name.data);
    _c.printf("  thing: %x\n", thing);
}

print_person_and_thing :: (pet: Pet, thing: $T)
{
    print("print_person_and_thing (but person is a pet)");
    _c.printf("  name: %s\n", pet.name.data);
    _c.printf("  owner: %x\n", pet.owner);
    _c.printf("  thing: %x\n", thing);
    // assert(false);
}
