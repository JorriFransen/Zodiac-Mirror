
_c :: import c;

Thread :: struct
{
    handle: u64;
    user_data: *void;
}

Thread_Routine :: typedef *(thread: *Thread) -> *void;

create_thread :: (thread_routine: Thread_Routine, user_data: *void) -> Thread
{
    result :=  __create_thread__(thread_routine, user_data);
    return result;
}

main :: ()
{
    printer_args := (:*void)6;

    t0 : Thread;
    t0.user_data = (:*void)5;

    // t1 := __create_thread__(printer, printer_args);
    // t2 := __create_thread__(printer, printer_args);
    t1 := create_thread(*printer, printer_args);
    printer(*t0);
    t2 := create_thread(*printer, t0.user_data);


    _c.printf("t1.handle: %d\n", t1.handle);
    _c.printf("t2.handle: %d\n", t2.handle);

    __join_thread__(t1);
    __join_thread__(t2);
}

printer :: (thread: *Thread) -> *void
{
    // _c.printf("thread: %p\n", thread);
    count := (:u64)thread.user_data;
    _c.printf("starting printer, handle=%d, data=%ld\n", thread.handle, count);

    // _c.getchar();

    while (count > 0)
    {
        _c.printf("Printer %d: %d\n", thread.handle, count);
        count--;
    }
}
