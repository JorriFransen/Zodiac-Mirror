
std :: import std;
using std;

// _c :: import c;
using _c;

_thread :: import thread;
using _thread;

global_counter : u64 = 0;
global_counter_2 : u64 = 0;

global_counter_2_mutex : Mutex;

main :: ()
{
    open_std_handles();

    _main();

    std.print("\nthread test");
    printf("global_counter: %llu\n", global_counter);

    adders : std.Array(Thread);

    adder_count := 10000;
    amount_per_adder := 50;

    for (i := 0; i < adder_count; i++)
    {
        at : Thread;
        if (i % 2)
        {
            at = create_thread(*add_func, amount_per_adder);
        }
        else
        {
            at = create_thread(*add_func2, amount_per_adder);
        }

        if (at.handle)
        {
            array_add(*adders, at);
        }
        else
        {
            fprintf(stderr, "Thread creation failed!\n");
            adder_count = i;
            break;
        }

    }


    for (i : u64 = 0; i < adders.count; i++)
    {
        at := adders[i];
        join_thread(at);
    }

    printf("global_counter: %llu\n", global_counter);
    printf("\texpected: %llu\n\n", (:u64)(adder_count * amount_per_adder));
    assert(global_counter == (:u64)(adder_count * amount_per_adder));

    adders.count = 0;

    for (i := 0; i < adder_count; i++)
    {
        at : Thread;
        if (i % 2)
        {
            at = create_thread(*add_func_mut, amount_per_adder);
        }
        else
        {
            at = create_thread(*add_func_mut2, amount_per_adder);
        }

        if (at.handle)
        {
            array_add(*adders, at);
        }
        else
        {
            fprintf(stderr, "Thread creation failed\n");
            adder_count = i;
            break;
        }
    }


    for (i : u64 = 0; i < adders.count; i++)
    {
        at := adders[i];
        join_thread(at);
    }

    printf("global_counter_2: %llu\n", global_counter_2);
    printf("\texpected: %llu\n", (:u64)(adder_count * amount_per_adder));
    assert(global_counter_2 == (:u64)(adder_count * amount_per_adder));

    array_free(*adders);
}

add_func_mut :: (thread: *Thread) -> *void
{
    to_add := (:u64)thread.user_data;
    mutex_lock(*global_counter_2_mutex);
    for (i : u64 = 0; i < to_add; i++)
    {
        global_counter_2 += 1;
    }
    mutex_unlock(*global_counter_2_mutex);
}

add_func_mut2 :: (thread: *Thread) -> *void
{
    to_add := (:u64)thread.user_data;
    mutex_lock(*global_counter_2_mutex);
    global_counter_2 += to_add;
    mutex_unlock(*global_counter_2_mutex);
}

add_func :: (thread: *Thread) -> *void
{
    to_add := (:u64)thread.user_data;

    for (i : u64 = 0; i < to_add; i++)
    {
        done := false;
        while (!done)
        {
            value := global_counter;
            done = compare_and_swap(*global_counter, value, value + 1);
        }
    }
}

add_func2 :: (thread: *Thread) -> *void
{
    to_add := (:u64)thread.user_data;

    done := false;
    while (!done)
    {
        value := global_counter;
        done = compare_and_swap(*global_counter, value, value + to_add);
    }
}
