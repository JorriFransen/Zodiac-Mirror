
static_assert(PLATFORM_LINUX);

std :: import std;
using std;

posix :: import posix;

_og :: import os_generic;
using _og;

_thread :: import thread;
using _thread;

pthread :: import pthread;

string_builder :: import string_builder;

#foreign unlink :: (pathname: *u8) -> int;

is_directory :: (path: String) -> bool
{
    statbuf : posix.stat_struct;
    stat_res := posix.stat(path.data, *statbuf);
    if (stat_res != 0)
    {
        _c.printf("stat res not zero\n");
        return false;
    }

    return posix.S_ISDIR(statbuf.st_mode);
}

is_regular_file :: (path: String) -> bool
{
    statbuf : posix.stat_struct;
    stat_res := posix.stat(path.data, *statbuf);
    if (stat_res != 0)
    {
        return false;
    }

    return posix.S_ISREG(statbuf.st_mode);
}

list_files_in_directory :: (path: String) -> Array(String)
{
    result : Array(String) = { null, 0, 0 };

    d := posix.opendir(path.data);

    if (d)
    {
        defer posix.closedir(d);

        dir_ent := posix.readdir(d);
        while (dir_ent)
        {
            is_file := false;

            if (dir_ent.d_type == posix.DT_UNKNOWN)
            {
                assert(false);
            }
            else if (dir_ent.d_type == posix.DT_REG)
            {
                is_file = true;
            }

            if (is_file)
            {
                file_name := string_new(*dir_ent.d_name[0]);
                array_add(*result, file_name);
            }

            dir_ent = posix.readdir(d);
        }
    }

    return result;
}

get_full_path :: (name: String) -> String
{
    c_str := posix.realpath(name.data, null);

    result := string_ref(c_str);

    if (!string_ends_with(result, "/"))
    {
        to_free := result.data;
        result = string_append(result, "/");
        _c.free(to_free);
    }

    _c.printf("result: %s\n", result.data);
    return result;
}

delete_file :: (path: String) -> bool
{
    result := unlink(path.data);

    return result == 0;
}

get_page_size :: () -> s64
{
    return posix.sysconf(posix._SC_PAGESIZE);
}

alloc_aligned :: (alignment: s64, size: s64) -> *void
{
    mem : *void = null;
    res := posix.posix_memalign(*mem, alignment, size);
    assert(res == 0);
    assert(mem);

    return mem;
}

free_aligned :: (ptr: *void) 
{
    _c.free(ptr);
}

save_original_terminal_state :: () -> void { } // Not really supported on linux

reset_terminal_state :: () -> void
{
    _c.printf("\033[0m");
}

set_terminal_color :: (color: Terminal_Color, bold: bool)
{
    fmt := string_new("\033[0;00m");
    defer _c.free(fmt.data);

    if (bold) fmt.data[2] = '1';

    using Terminal_Color;

    cc : *u8;

    switch (color)
    {
        case BLACK: cc = "30";
        case RED:   cc = "31";
        case GREEN: cc = "32";
        case BLUE:  cc = "34";
        case YELLOW: cc = "33";
        case PURPLE: cc = "35";
        case CYAN: cc = "36";
        case WHITE: cc = "37";

        default: assert(false);
    }

    assert(string_length(cc) == 2);

    fmt.data[4] = cc[0];
    fmt.data[5] = cc[1];

    _c.printf(fmt.data);

}

__zodiac_start_thread :: (_thread_start_info: *void) -> *void
{
    thread_start_info := (:*Thread_Start_Info)_thread_start_info;

    _thread.atomic_cond_wait(*thread_start_info.signal_started, null);
    thread_func := thread_start_info.thread_routine;
    thread := thread_start_info.thread;
    _thread.atomic_cond_signal(*thread_start_info.signal_thread_copied);

    // return null;
    ret_val := thread_func(*thread);
    return ret_val;
}

_create_thread :: (start_info: *Thread_Start_Info) -> bool
{

    thread_ptr := *start_info.thread;
    handle_ptr := *thread_ptr.handle;
    success := pthread.pthread_create((:*pthread.pthread_t)(handle_ptr), null,
                                    *__zodiac_start_thread, start_info);
    return success == 0;
}

_join_thread :: (thread: Thread) -> *void
{
    ret_val : *void = null;
    result := pthread.pthread_join((:pthread.pthread_t)thread.handle, *ret_val);
    assert(result == 0);
    return ret_val;
}

Pipe :: struct
{
    read_fd  : posix.fd_t;
    write_fd : posix.fd_t;
}

IO_Error :: enum
{
    INVALID;
    NONE;
    ERRNO;
}

pipe_create :: () -> IO_Error #required, Pipe
{
    result : Pipe;
    ret := posix.pipe((:*[2]s32)(*result.read_fd));

    if (ret == 0)
    {
        return IO_Error.NONE, result;
    }
    else if (ret == -1)
    {
        dummy_res : Pipe;
        return IO_Error.ERRNO, { -1, -1 };
    }

    assert(false);
}

pipe_close :: (pipe: *Pipe) -> IO_Error #required
{
    read_res := pipe_close_read(pipe);
    if (read_res != IO_Error.NONE) return read_res;

    return pipe_close_write(pipe);
}

pipe_close_read :: (pipe: *Pipe) -> IO_Error #required
{
    if (pipe.read_fd == -1)
        return IO_Error.NONE;

    ret := posix.close(pipe.read_fd);
    if (ret == 0)
    {
        pipe.read_fd = -1;
        return IO_Error.NONE;
    }
    else if (ret == -1)
    {
        return IO_Error.ERRNO;
    }

    assert(false);
    return IO_Error.INVALID;
}

pipe_close_write :: (pipe: *Pipe) -> IO_Error #required
{
    if (pipe.write_fd == -1)
        return IO_Error.NONE;

    ret := posix.close(pipe.write_fd);
    if (ret == 0)
    {
        pipe.write_fd = -1;
        return IO_Error.NONE;
    }
    else if (ret == -1)
    {
        return IO_Error.ERRNO;
    }

    _c.printf("posix.close returned: %d\n", ret);

    assert(false);
    return IO_Error.INVALID;
}

pipe_read :: (pipe: *Pipe) -> IO_Error #required, String
{
    assert(pipe.read_fd);

    sb := string_builder.create(1024);
    defer string_builder.free(*sb);

    buf: [1024]u8;
    readc : s32; // @TODO: This should be a an s64 when we have correct integer conversion

    while (true)
    {
        readc = posix.read(pipe.read_fd, *buf, (:s32)array_length(buf));
        assert(readc >= 0); // @TODO: handle errno
        if (readc) string_builder.append(*sb, (:*u8)(*buf), (:s64)readc);
        else break;
    }

    return IO_Error.NONE, string_builder.copy_to_string(*sb);
}

Execute_Process_Error :: enum
{
    NONE;
    PIPE_CREATE_FAILED;
    PIPE_READ_FAILED;
    FORK_FAILED;
    UNEXPECTED;
}

Execute_Process_Result :: struct
{
    exit_code : u32;
    stdout    : String;
    stderr    : String;
}

execute_process :: (command: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
    {
      _args: Array(*u8) = { null, 0, 0 };
        defer array_free(*_args);

        for (i := 0; i < args.count; i++)
        {
          any_arg := args[i];
            assert(any_arg.type_info == get_type_info(*u8));
            array_add(*_args, <(:**u8)(any_arg.value));
        }

        return _execute_process(command, make_array_ref(_args));
    }

_execute_process :: (command: String, args: Array_Ref(*u8)) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    pipe_err : IO_Error;
    in       : Pipe;
    out      : Pipe;
    err      : Pipe;

    using Execute_Process_Error;

    result : Execute_Process_Result;
    result.exit_code = 0;
    result.stdout = { null, 0 };

    pipe_err, in = pipe_create();
    if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
    defer pipe_close(*in);

    pipe_err, out = pipe_create();
    if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
    defer pipe_close(*out);

    pipe_err, err = pipe_create();
    if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
    defer pipe_close(*err);

    pid := posix.fork();

    if (pid == 0)
    {
        _args : std.Array(*u8) = { null, 0, 0 };
        defer std.array_free(*_args);

        std.array_add(*_args, command.data);
        for (i := 0; i < args.count; i++)
        {
            std.array_add(*_args, args[i]);
        }
        std.array_add(*_args, null);

        pipe_close_write(*in);
        pipe_close_read(*out);
        pipe_close_read(*err);

        posix.dup2(in.read_fd, posix.STDIN_FILENO);
        posix.dup2(out.write_fd, posix.STDOUT_FILENO);
        posix.dup2(err.write_fd, posix.STDERR_FILENO);

        pipe_close_read(*in);
        pipe_close_write(*out);
        pipe_close_write(*err);

        exec_res := posix.execvp(command.data, _args.data);
        assert(exec_res == -1);

        if (exec_res == -1)
        {
            _c.fprintf(stderr, "Command execution failed: \"sh -c %s\"\n", command.data);
            assert(false);
        }

        posix._exit(1);
    }
    else if (pid > 0)
    {
        pipe_close_read(*in);
        pipe_close_write(*out);
        pipe_close_write(*err);

        status : u32 = 0;
        wait_res := posix.wait(*status);
        assert(wait_res == pid);
        assert(posix.WIFEXITED(status));

        result.exit_code = posix.WEXITSTATUS(status);

        io_err := IO_Error.NONE;

        io_err, result.stdout = pipe_read(*out);
        if (io_err != IO_Error.NONE) return PIPE_READ_FAILED, result;

        io_err, result.stderr = pipe_read(*err);
        if (io_err != IO_Error.NONE) return PIPE_READ_FAILED, result;

        return NONE, result;
    }
    else
    {
        assert(false);
        return FORK_FAILED, result;
    }

    assert(false);
    return UNEXPECTED, result;
}

execute_process_shell :: (command: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    sb := string_builder.create(256);
    defer string_builder.free(*sb);

    _array : Array(*u8) = { null, 0, 0 };
    defer array_free(*_array);

    string_builder.append(*sb, command.data);
    string_builder.append(*sb, " ");

    for (i := 0; i < args.count; i++)
    {
        any := args[i];
        assert(any.type_info == get_type_info(*u8));
        _arg := <((:**u8)any.value);
        string_builder.append(*sb, _arg);
    }

    command_str := string_builder.copy_to_string(*sb);
    defer _c.free(command_str.data);

    array_add(*_array, "-c");
    array_add(*_array, command_str.data);

    return _execute_process("sh", make_array_ref(_array));
}
