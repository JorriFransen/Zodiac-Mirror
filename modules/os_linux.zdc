
static_assert(PLATFORM_LINUX);

std :: import std;
using std;

posix :: import posix;

_og :: import os_generic;
using _og;

is_directory :: (path: String) -> bool
{
    statbuf : posix.stat_struct;
    stat_res := posix.stat(path.data, *statbuf);
    if (stat_res != 0)
    {
        return false;
    }

    return posix.S_ISDIR(statbuf.st_mode);
}

is_regular_file :: (path: String) -> bool
{
    statbuf : posix.stat_struct;
    stat_res := posix.stat(path.data, *statbuf);
    if (stat_res != 0)
    {
        return false;
    }

    return posix.S_ISREG(statbuf.st_mode);
}

list_files_in_directory :: (path: String) -> Array(String)
{
    result : Array(String) = { null, 0, 0 };

    d := posix.opendir(path.data);

    if (d)
    {
        defer posix.closedir(d);

        dir_ent := posix.readdir(d);
        while (dir_ent)
        {
            is_file := false;

            if (dir_ent.d_type == posix.DT_UNKNOWN)
            {
                assert(false);
            }
            else if (dir_ent.d_type == posix.DT_REG)
            {
                is_file = true;
            }

            if (is_file)
            {
                file_name := string_new(*dir_ent.d_name[0]);
                array_add(*result, file_name);
            }

            dir_ent = posix.readdir(d);
        }
    }

    return result;
}

get_full_path :: (name: String) -> String
{
    c_str := posix.realpath(name.data, null);

    result := string_ref(c_str);

    if (!string_ends_with(result, "/"))
    {
        to_free := result.data;
        result = string_append(result, "/");
        _c.free(to_free);
    }

    _c.printf("result: %s\n", result.data);
    return result;
}

save_original_terminal_state :: () -> void { } // Not really supported on linux
reset_terminal_state :: () -> void
{
    _c.printf("\033[0m");
}

set_terminal_color :: (color: Terminal_Color, bold: bool)
{
    fmt := "\033[0;00m";

    if (bold) fmt[2] = '1';

    using Terminal_Color;

    cc : *u8;

    switch (color)
    {
        case BLACK: cc = "30";
        case RED:   cc = "31";
        case GREEN: cc = "32";
        case BLUE:  cc = "34";
        case YELLOW: cc = "33";
        case PURPLE: cc = "35";
        case CYAN: cc = "36";
        case WHITE: cc = "37";

        default: assert(false);
    }

    assert(string_length(cc) == 2);

    fmt[4] = cc[0];
    fmt[5] = cc[1];

    _c.printf(fmt);

}

