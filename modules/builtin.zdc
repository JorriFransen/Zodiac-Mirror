

int :: typedef s64;

FILE :: typedef *void;

stdin  : *FILE = null;
stdout : *FILE = null;
stderr : *FILE = null;

PLATFORM_WINDOWS :: false;
PLATFORM_LINUX   :: false;

static_if (PLATFORM_WINDOWS)
{
    print_stack_trace :: ()
    {
    }

    #foreign _fdopen :: (fd: int, mode: *u8) -> *FILE;
    fdopen :: (fd: int, mode: *u8) -> *FILE { return _fdopen(fd, mode); }
}
else static_if(PLATFORM_LINUX)
{
    #foreign fdopen :: (fd: int, mode: *u8) -> *FILE;
    #foreign backtrace :: (buffer: **void, size: int) -> int;
    #foreign backtrace_symbols :: (buffer: **void, size: int) -> **u8;

    print_stack_trace :: ()
    {
        MAX_STACK_TRACE_LENGTH :: 1024;
        frames : [MAX_STACK_TRACE_LENGTH]*void;
        trace_length := backtrace(*frames[0], MAX_STACK_TRACE_LENGTH);

        names := backtrace_symbols(*frames[0], trace_length);
        for (i := 0; i < trace_length; i++)
        {
            fprintf(stderr, "%s:\n", names[i]);
        }
    }
}
else
{
    static_assert(false);
}


Type_Info_Kind : u64 : enum
{
    INVALID;
    BASE;
    POINTER;
    STRUCT;
    UNION;
    ENUM;
    FUNCTION;
    STATIC_ARRAY;
}

Type_Info_Flags : u64 : enum
{
    NONE    :: 0;
    INT     :: 1;
    FLOAT   :: 2;
    SIGNED  :: 4;
    MRV     :: 8;
}

Type_Info :: struct
{
    kind      : Type_Info_Kind;
    flags     : Type_Info_Flags;
    name      : String;
    byte_size : u64;

    union
    {
        base  : *Type_Info;

        aggregate :: struct
        {
            count : u64;
            first : *Type_Info_Aggregate_Member;
        }

        enum_info :: struct
        {
            enum_base    : *Type_Info;
            member_count : u64;
            first        : *Type_Info_Enum_Member;
        }

        function :: struct
        {
            return_type : *Type_Info;
            arg_count   : u64;
            first_arg   : *Type_Info_Aggregate_Member;
        }

        static_array :: struct
        {
            base : *Type_Info;
            count : u64;
        }
    }
}

Type_Info_Aggregate_Member :: struct
{
    name : String;
    type : *Type_Info;
}

Type_Info_Enum_Member :: struct
{
    name  : String;
    value : u64;
    type  : *Type_Info;
}

type_info :: (type: Type) -> *Type_Info
{
    static_if (ZODIAC_RUNNING_BYTECODE) {
        base_ptr : *Type_Info = get_type_info_base_ptr();
        return *base_ptr[(:u64)type];
    } else {
        default_assert_handler(false, #FUNC_NAME, #FILE_NAME, #LINE_NO);
    }
}

Any :: struct
{
    type_info : *Type_Info;
    value     : *void;
}

string_length :: (c_str: *u8) -> s64
{
    if (!c_str) return 0;

    length := 0;
    i : u64 = 0;

    while (c_str[i] != 0)
    {
        i += 1;
        length += 1;
    }

    return length;
}

Array_Ref :: struct(T)
{
    data  : *T;
    count : s64;

    #overload[] array_ref_index;
}

array_ref_index :: (array_ref: Array_Ref($T), index: s64) -> T
{
    return array_ref.data[index];
}

Array_Ref_of_Any :: typedef Array_Ref(Any);

#foreign fprintf :: (file: *FILE, format: *u8, ...) -> int;
#foreign abort :: () -> void;
// #foreign exit :: (status: s32) -> void;

_builtin_open_std_handles :: () -> void
{
    stdin = fdopen(0, "r");
    stdout = fdopen(1, "w");
    stderr = fdopen(2, "w");
}

default_assert_handler :: (value: bool, function_name: *u8, file_name: *u8, line: s64)
{
    if (value)
    {
        return;
    }

    if (!stderr)
    {
        _builtin_open_std_handles();
    }

    // _c.fprintf(_c._stderr, "\n\n");
    // _stderr := fdopen(2, "w");
    fprintf(stderr, "Assertion failed in function %s : %s:%d\n", function_name,
                file_name, line);

    static_if (ZODIAC_RUNNING_BYTECODE)
    {
        __assert_fail();
    }
    else
    {
        print_stack_trace();
        abort();
    }
}

String :: struct
{
    data   : *u8;
    length : s64;

    #overload[] string_index;
}


string_index :: (str: String, index: s64) -> u8
{
    default_assert_handler(index < str.length, #FUNC_NAME, #FILE_NAME, #LINE_NO);

    return str.data[index];
}

Allocation_Mode :: enum
{
    ALLOCATE;
    RESIZE;
    FREE;
    FREE_ALL;
}

Allocator_Func :: typedef *(allocator_data: *void, mode: Allocation_Mode, size: s64,
                            old_size: s64, alignment: s64, old_ptr: *void) -> *void;

Allocator :: struct
{
    allocate : Allocator_Func;
    data     : *void;
}

alloc :: (allocator: *Allocator, size: s64, alignment: s64) -> *void
{
    return allocator.allocate(allocator.data, Allocation_Mode.ALLOCATE, size, 0, alignment, null);
}

// alloc_type :: (allocator: *Allocator, $T: Type) -> *T
// {
//     size :: sizeof(T);
//     alignment := 8;
//     if (size < alignment) alignment = size;
// 
//     return alloc(allocator, size, alignment);
// }

_free :: (allocator: *Allocator, ptr: *void, size: s64)
{
    allocator.allocate(allocator.data, Allocation_Mode.FREE, size, size, 0, ptr);
}
