_c :: import c;

std :: import std;
using std;

static_if (PLATFORM_LINUX) {
    os_linux :: import os_linux;
} else static_if (PLATFORM_WINDOWS) {
    os_windows :: import os_windows;
}

string_builder :: import string_builder;

Execute_Process_Error :: enum
{
    NONE;
    PIPE_CREATE_FAILED;
    PIPE_READ_FAILED;
    FORK_FAILED;
    UNEXPECTED;
}

Execute_Process_Result :: struct
{
    exit_code : u32;
    stdout    : String;
    stderr    : String;
}

execute_process_result_free :: (exec_prog_res: *Execute_Process_Result)
{
    _c.free(exec_prog_res.stdout.data);
    _c.free(exec_prog_res.stderr.data);
}

static_if (PLATFORM_LINUX)
{
    _execute_process :: (command: String, args: Array_Ref(*u8)) ->
        Execute_Process_Error #required,
        Execute_Process_Result
    {
        using os_linux;

        pipe_err : IO_Error;
        in       : Pipe;
        out      : Pipe;
        err      : Pipe;

        using Execute_Process_Error;

        result : Execute_Process_Result;
        result.exit_code = 0;
        result.stdout = { null, 0 };

        pipe_err, in = pipe_create();
        if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
        defer pipe_close(*in);

        pipe_err, out = pipe_create();
        if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
        defer pipe_close(*out);

        pipe_err, err = pipe_create();
        if (pipe_err != IO_Error.NONE) return PIPE_CREATE_FAILED, result;
        defer pipe_close(*err);

        pid := posix.fork();

        if (pid == 0) {
            _args : std.Array(*u8) = { null, 0, 0 };
            defer std.array_free(*_args);

            std.array_add(*_args, command.data);
            for (i := 0; i < args.count; i++) {
                std.array_add(*_args, args[i]);
            }
            std.array_add(*_args, null);

            pipe_close_write(*in);
            pipe_close_read(*out);
            pipe_close_read(*err);

            posix.dup2(in.read_fd, posix.STDIN_FILENO);
            posix.dup2(out.write_fd, posix.STDOUT_FILENO);
            posix.dup2(err.write_fd, posix.STDERR_FILENO);

            pipe_close_read(*in);
            pipe_close_write(*out);
            pipe_close_write(*err);

            exec_res := posix.execvp(command.data, _args.data);
            assert(exec_res == -1);

            if (exec_res == -1) {
                _c.fprintf(stderr, "Command execution failed: \"sh -c %s\"\n", command.data);
                assert(false);
            }

            posix._exit(1);
        }
        else if (pid > 0) {
            pipe_close_read(*in);
            pipe_close_write(*out);
            pipe_close_write(*err);

            status : s32 = 0;
            wait_res := posix.wait(*status);
            assert(wait_res == pid);
            if (posix.WIFEXITED(status)) {
                result.exit_code = (:u32)posix.WEXITSTATUS(status);
            } else if (posix.WIFSIGNALED(status)) {
                term_sig := posix.WTERMSIG(status);
                assert(false);
            } else assert(false);

            io_err := IO_Error.NONE;

            io_err, result.stdout = pipe_read(*out);
            if (io_err != IO_Error.NONE) return PIPE_READ_FAILED, result;

            io_err, result.stderr = pipe_read(*err);
            if (io_err != IO_Error.NONE) return PIPE_READ_FAILED, result;

            return NONE, result;
        } else {
            assert(false);
            return FORK_FAILED, result;
        }

        assert(false);
        return UNEXPECTED, result;
    }

}
else static_if (PLATFORM_WINDOWS)
{
    _read_available :: (r_handle: os_windows.HANDLE, sb: *string_builder.String_Builder)
    {
        using os_windows;

        READ_BUF_LEN :: 1024;
        read_buf : [READ_BUF_LEN]u8;

        reading := true;
        while (reading) {
            bytes_available : DWORD;
            peek_res := PeekNamedPipe(r_handle, null, 0, null, *bytes_available, null);
            assert(peek_res);

            if (bytes_available <= 0) {
                reading = false;
                break;
            }

            read : DWORD;
            read_res := ReadFile(r_handle, *(read_buf[0]), (:DWORD)READ_BUF_LEN, *read, null);
            assert(read_res);

            if (read > 0) {
                string_builder.append(sb, *(read_buf[0]), read);
            } else {
                reading = false;
            }
        }
    }

    _execute_process :: (exe_name: String, args: Array_Ref(*u8)) ->
        Execute_Process_Error #required,
        Execute_Process_Result
    {
        using os_windows;

        result : Execute_Process_Result = { 1, { null, 0 }, { null, 0 } };

        CMD_PATH_BUF_LEN :: 4096;
        cmd_path : [CMD_PATH_BUF_LEN]u8;
        file_part_ptr : *u8 = null;
        sp_result := SearchPathA(null, exe_name.data, ".exe", (:DWORD)CMD_PATH_BUF_LEN, *cmd_path[0],
                                 *file_part_ptr);

        if (sp_result == 0) {
            // @TODO: Handle this
            err_code := GetLastError();
            assert(false);
        } else if (sp_result > CMD_PATH_BUF_LEN) {
            // @TODO: Handle this
            assert(false); // Buffer is not big enough
        }

        exe_path := string_ref(*(cmd_path[0]), sp_result);

        sec_attr : SECURITY_ATTRIBUTES;
        sec_attr.nLength = (:DWORD)sizeof(SECURITY_ATTRIBUTES);
        sec_attr.bInheritHandle = TRUE;
        sec_attr.lpSecurityDescriptor = null;

        stdin_read_handle : HANDLE = null;
        stdin_write_handle : HANDLE = null;
        stdout_read_handle : HANDLE = null;
        stdout_write_handle : HANDLE = null;
        stderr_read_handle : HANDLE = null;
        stderr_write_handle : HANDLE = null;

        pipe_res := CreatePipe(*stdout_read_handle, *stdout_write_handle, *sec_attr, 0);
        if (!pipe_res) {
            err_code := GetLastError();
            _c.printf("CreatePipe failed with error: %d\n", err_code);
            assert(false);
        }
        defer CloseHandle(stdout_read_handle);
        defer CloseHandle(stdout_write_handle);
        pipe_res = SetHandleInformation(stdout_read_handle, HANDLE_FLAG_INHERIT, 0);
        assert(pipe_res);

        pipe_res = CreatePipe(*stdin_read_handle, *stdin_write_handle, *sec_attr, 0);
        if (!pipe_res) {
            err_code := GetLastError();
            _c.printf("CreatePipe failed with error: %d\n", err_code);
            assert(false);
        }
        pipe_res = SetHandleInformation(stdin_write_handle, HANDLE_FLAG_INHERIT, 0);
        defer CloseHandle(stdin_read_handle);
        defer CloseHandle(stdin_write_handle);
        assert(pipe_res);

        pipe_res = CreatePipe(*stderr_read_handle, *stderr_write_handle, *sec_attr, 0);
        if (!pipe_res) {
            err_code := GetLastError();
            _c.printf("CreatePipe failed with error: %d\n", err_code);
            assert(false);
        }
        defer CloseHandle(stderr_read_handle);
        defer CloseHandle(stderr_write_handle);
        pipe_res = SetHandleInformation(stderr_read_handle, HANDLE_FLAG_INHERIT, 0);
        assert(pipe_res);

        process_info : PROCESS_INFORMATION;
        startup_info : STARTUPINFOA;

        _c.memset(*process_info, 0, sizeof(PROCESS_INFORMATION));

        _c.memset(*startup_info, 0, sizeof(STARTUPINFOA));
        startup_info.cb = (:DWORD)sizeof(STARTUPINFOA);
        startup_info.dwFlags |= STARTF_USESTDHANDLES;
        startup_info.hStdInput = stdin_read_handle; 
        startup_info.hStdOutput = stdout_write_handle;
        startup_info.hStdError = stderr_write_handle;

        sb := string_builder.create(512);
        defer string_builder.free(*sb);

        string_builder.append(*sb, exe_name.data);
        string_builder.append(*sb, " ");
        for (i := 0; i < args.count; i++) {
            string_builder.append(*sb, args[i]);
            string_builder.append(*sb, " ");
        }

        arg_str := string_builder.copy_to_string(*sb);
        defer _c.free(arg_str.data);

        cp_result := CreateProcessA(exe_path.data, arg_str.data, null, null, TRUE, 0, null, null, 
                                    *startup_info, *process_info);

        if (!cp_result) {
            err_code := GetLastError();
            _c.fprintf(stderr, "CreateProcessA failed, error: %d\n", err_code);
            if (err_code == ERROR_FILE_NOT_FOUND) {
                assert(false);
            }
            assert(false);
        }

        stdout_sb := string_builder.create(1024);
        stderr_sb := string_builder.create(1024);
        defer string_builder.free(*stdout_sb);
        defer string_builder.free(*stderr_sb);

        while (true) {
            proc_wait_res := WaitForSingleObject(process_info.hProcess, 5);

            _read_available(stdout_read_handle, *stdout_sb);
            _read_available(stderr_read_handle, *stderr_sb);

            if (proc_wait_res == WAIT_OBJECT_0) {
                break;
            } else if (proc_wait_res == WAIT_TIMEOUT) {
                // Keep looping
            }
            else assert(false);

        }

        result.stdout = string_builder.copy_to_string(*stdout_sb);
        result.stderr = string_builder.copy_to_string(*stderr_sb);

        exit_code : DWORD;

        exit_code_res := GetExitCodeProcess(process_info.hProcess, *exit_code);
        assert(exit_code_res);

        close_res := CloseHandle(process_info.hProcess);
        assert(close_res);
        close_res = CloseHandle(process_info.hThread);
        assert(close_res);

        result.exit_code = exit_code;
        return Execute_Process_Error.NONE, result;

    }
}

execute_process :: (command: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    _args: Array(*u8) = { null, 0, 0 };
    defer array_free(*_args);

    for (i := 0; i < args.count; i++) {
        any_arg := args[i];
        assert(any_arg.type_info == get_type_info(*u8));
        array_add(*_args, <(:**u8)(any_arg.value));
    }

    return _execute_process(command, make_array_ref(_args));
}

_execute_process_shell :: (command: String, args: Array_Ref(*u8)) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    sb := string_builder.create(256);
    defer string_builder.free(*sb);

    _array : Array(*u8) = { null, 0, 0 };
    defer array_free(*_array);

    string_builder.append(*sb, command.data);
    string_builder.append(*sb, " ");

    for (i := 0; i < args.count; i++) {
        _arg := args[i]
        string_builder.append(*sb, _arg);
    }

    command_str := string_builder.copy_to_string(*sb);
    defer _c.free(command_str.data);

    shell_cmd : String;

    static_if (PLATFORM_LINUX) {
        array_add(*_array, "-c");
        shell_cmd = string_ref("sh");
    } else static_if (PLATFORM_WINDOWS) {
        array_add(*_array, "/c ");
        shell_cmd = string_ref("cmd");
    }

    array_add(*_array, command_str.data);

    return _execute_process(shell_cmd, make_array_ref(_array));
}

execute_process_shell :: (command: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    _args : Array(*u8) = { null, 0, 0 };
    defer array_free(*_args);

    for (i := 0; i < args.count; i++) {
        arg_any := args[i];
        assert(arg_any.type_info == get_type_info(*u8));
        _arg := <((:**u8)arg_any.value);
        array_add(*_args, _arg);
    }

    return _execute_process_shell(command, make_array_ref(_args));
}
