
_c :: import c;
std :: import std;
os :: import os;

_og :: import os_generic;
using _og;

posix :: import posix;

_sb :: import string_builder;

using std;
using _sb;

int :: typedef s64;

Test_File_Flag : u64 : enum
{
    EXPECT_FAIL :: 01;
    DONT_RUN    :: 02;
}

Test_File :: struct
{
    flags : u64;
    name : String;
    path : String;
}

Test_Files :: struct
{
    files             : Array(Test_File);
    longest_file_name : u64;
}

Test_Results :: struct
{
    mode : Test_Mode;
    total_file_count : int;
    fail_file_count : int;
    expected_fail_count : int;
    dont_run_file_count : int;
}

Test_Mode :: enum
{
    COMPILING;
    RUNNING_BYTECODE;
    RUNNING_LLVM;
}

Test_Result_Status :: enum
{
    INVALID;
    SUCCESS;
    FAIL;
    FAIL_EXPECTED;
    SKIPPED;
}

Test_Config :: struct
{
    expected_fails : Array(String);
    dont_runs      : Array(String);
}

main :: (argc: int, argv: **u8) -> int
{
    _c.open_std_handles();

    if (argc != 2)
    {
        usage();
        return -1;
    }

    test_folder_str := string_ref(argv[1]);
    test_folder_path := os.get_full_path(test_folder_str);
    defer _c.free(test_folder_path.data);

    if (!os.is_directory(test_folder_path))
    {
        _c.fprintf(_c._stderr, "Path is not a directory: %s\n", test_folder_str.data);
        return -1;
    }

    zodiac_exe_path : *u8;
    static_if (PLATFORM_WINDOWS)
    {
        zodiac_exe_path = "./zodiac.exe";
    }
    else
    {
        zodiac_exe_path = "./zodiac";
    }

    if (!os.is_regular_file(zodiac_exe_path))
    {
        _c.fprintf(_c._stderr, "Did not find zodiac executable at expected location\n");
        return -1;
    }

    expected_config_path := string_append(test_folder_path, "config.ztest");
    defer _c.free(expected_config_path.data);
    test_config : Test_Config;
    if (os.is_regular_file(expected_config_path))
    {
        test_config = parse_test_config(expected_config_path);
    }
    else
    {
        test_config = default_test_config();
    }

    files := find_test_files(test_folder_path);
    defer array_free(*files.files);

    apply_config(*files, *test_config);

    _c.printf("\nCOMPILING:\n");
    compile_results := run_tests(Test_Mode.COMPILING, files);
    _c.printf("\nRUNNING_BYTECODE:\n");
    bytecode_results := run_tests(Test_Mode.RUNNING_BYTECODE, files);
   _c.printf("\nRUNNING_LLVM:\n");
   llvm_results := run_tests(Test_Mode.RUNNING_LLVM, files);

    _c.printf("\n");
    _c.printf("Done, ran %d tests\n", compile_results.total_file_count);
    report_test_results(compile_results);
    report_test_results(bytecode_results);
   report_test_results(llvm_results);

    for (i := 0; i < files.files.count; i++)
    {
        file := files.files[i];
        _c.free(file.name.data);
        _c.free(file.path.data);
    }

    return 0;
}

find_test_files :: (test_folder: String) -> Test_Files
{
    _c.printf("Searching for tests in: %s\n", test_folder.data);

    files := os.list_files_in_directory(test_folder);
    defer array_free(*files);

    result : Test_Files;
    result.files = { null, 0, 0 };
    result.longest_file_name = 0;

    for (i := 0; i < files.count; i++)
    {
        file_name := files[i];
        if (string_ends_with(files[i], ".zdc"))
        {
            tf : Test_File;
            tf.flags = 0;
            tf.name = file_name;
            tf.path = string_append(test_folder, file_name);
            array_add(*result.files, tf);

            if (tf.name.length > result.longest_file_name)
            {
                result.longest_file_name = tf.name.length;
            }
        }
        else
        {
            _c.free(file_name.data);
        }
    }

    _c.printf("found %d test files\n", result.files.count);

    return result;
}

run_tests :: (mode: Test_Mode, files: Test_Files) -> Test_Results
{
    result : Test_Results = { mode, 0, 0, 0, 0 };
    result.total_file_count = files.files.count;

    longest_mode_name : u64 = 0;
    mode_info := get_type_info(Test_Mode);

    for (i : u64 = 0; i < mode_info.enum_info.member_count; i++)
    {
        member := mode_info.enum_info.first[i];
        if (member.name.length > longest_mode_name)
        {
            longest_mode_name = member.name.length;
        }
    }

    longest_mode_name += 2;

    for (i := 0; i < files.files.count; i++)
    {
        file := files.files[i];
        result_status := run_test(mode, file, files.longest_file_name, longest_mode_name);

        using Test_Result_Status;

        switch (result_status)
        {
            case SUCCESS:
            {
            }

            case FAIL:
            {
                result.fail_file_count++;
            }

            case FAIL_EXPECTED:
            {
                result.expected_fail_count++;
                result.fail_file_count++;
            }

            case SKIPPED:
            {
                // result.expected_fail_count++;
                // result.fail_file_count++;
                result.dont_run_file_count++;
            }

            default: assert(false);
        }
    }

    return result;
}


run_test :: (mode: Test_Mode, tf: Test_File, longest_name_length: u64,
             _mode_padding: u64) -> Test_Result_Status
{
    __sb : String_Builder;
    sb := *__sb;
    init(sb, 1024);
    defer free(sb);

    static_if (PLATFORM_WINDOWS)
    {
        append(sb, "zodiac.exe ");
    }
    else
    {
        append(sb, "./zodiac ");
    }

    using Test_Mode;
    if (mode == RUNNING_BYTECODE)
    {
        append(sb, " -r ");
    }
    else if (mode == RUNNING_LLVM)
    {
        append(sb, " -e ");
    }

    append(sb, tf.path);
    append(sb, " 2>&1");

    if (mode == RUNNING_LLVM)
    {
        exe_file_name := string_new(tf.name);
        defer _c.free(exe_file_name.data);

        assert(exe_file_name.length > 4);
        exe_file_name.length -= 4;
        exe_file_name.data[exe_file_name.length] = '\0';

        append(sb, " && ./");
        append(sb, exe_file_name);
        append(sb, " 2>&1 ");
    }

    command := copy_to_string(sb);
    defer _c.free(command.data);

    // _c.printf("running command: %s\n", command.data);

    mode_name := enum_to_string(mode);
    _c.printf("    %s:", mode_name.data);

    mode_padding := _mode_padding - mode_name.length;
    for (i : u64 = 0; i < mode_padding; i++) _c.printf(" ");

    _c.printf(" %s", tf.name.data);

    padding := longest_name_length - tf.name.length + 2;
    for (i : u64 = 0; i < padding; i++)
    {
        _c.printf(" ");
    }

    // _c.fflush(_c.stdout);

    close_ret : int = 0;
    exit_code : int = 0;
    _output_sb : String_Builder;
    output_sb := *_output_sb;
    init(output_sb, 1024);
    defer free(output_sb);

    if (!(mode == RUNNING_BYTECODE || mode == RUNNING_LLVM &&
          (tf.flags & Test_File_Flag.DONT_RUN)))
    {
        // _c.printf("running command: '%s'\n", command.data);
        out_buf : [1024]u8;
        command_process := posix.popen(command.data, "r");

        while (posix.fgets(*out_buf[0], array_length(out_buf), command_process) != null)
        {
            output := string_new(*out_buf[0]);
            append(output_sb, output);
        }

        close_ret = posix.pclose(command_process);
        // _c.printf("close_ret: %d\n", close_ret);
        if (close_ret != -1)
        {
            exit_code = posix.exit_status(close_ret);
            // _c.printf("close: %d, exit: %d", close_ret, exit_code);
        }
        else
        {
            exit_code = 1;
        }
    }
    else
    {
        exit_code = 0;
    }

    os.save_terminal_state();

    if (exit_code != 0)
    {
        output_str := copy_to_string(output_sb);
        defer _c.free(output_str.data);


        result := Test_Result_Status.FAIL;
        if (tf.flags & Test_File_Flag.EXPECT_FAIL)
        {
            result = Test_Result_Status.FAIL_EXPECTED;
            os.set_terminal_color(Terminal_Color.GREEN, true);
            _c.printf(" FAIL_EXPECTED\n");
            os.reset_terminal_state();
        }
        else
        {
            os.set_terminal_color(Terminal_Color.RED, true);
            _c.printf(" FAIL");
            os.reset_terminal_state();
            _c.printf(" (exit_code: %d, close_ret: %d)\n", exit_code, close_ret);
            _c.printf("\n%s\n", output_str.data);
        }

        return result;
    }
    else
    {
        output_str := copy_to_string(output_sb);
        defer _c.free(output_str.data);

        // _c.printf("command output: %s\n", output_str.data);

        if ((mode == RUNNING_BYTECODE || mode == RUNNING_LLVM) &&
            (:bool)(tf.flags & Test_File_Flag.DONT_RUN))
        {
            os.set_terminal_color(Terminal_Color.GREEN, true);
            _c.printf(" SKIPPED\n");
            os.reset_terminal_state();
            return Test_Result_Status.SKIPPED;
        }
        else
        {
            os.set_terminal_color(Terminal_Color.GREEN, false);
            _c.printf(" OK\n");
            os.reset_terminal_state();
            // _c.printf("\n%s\n", output_str.data);
            return Test_Result_Status.SUCCESS;
        }

    }

    return Test_Result_Status.INVALID;
}

parse_test_config :: (path: String) -> Test_Config
{
    read_result : bool;
    config_string := os.read_file_string(path, *read_result);
    assert(read_result);
    defer _c.free(config_string.data);

    result := default_test_config();
    c := config_string.data;
    current_property : String = { null, 0 };

    while (<c != posix.EOF && <c != '\0')
    {
        c = skip_whitespace(c);

        if (!is_ident(<c))
        {
            _c.printf("unexpected character: '%c', %d\n", <c, <c);
            assert(false);
        }

        str_start := c;
        str_len : u64 = 0;

        while (is_ident(<c))
        {
            str_len++;

            c++;
        }

        c = skip_whitespace(c);

        if (<c == ':')
        {
            current_property = { str_start, str_len };
            c++;
            c = skip_whitespace(c);
        }
        else
        {
            assert(current_property.data);
            assert(current_property.length);

            file_name := string_new(str_start, str_len);

            if (string_equal(current_property, "expect_fail"))
            {
                // _c.printf("expected_fail: %.*s\n", file_name.length, file_name.data);
                array_add(*result.expected_fails, file_name);
            }
            else if (string_equal(current_property, "dont_run"))
            {
                // _c.printf("dont_run: %.*s\n", file_name.length, file_name.data);
                array_add(*result.dont_runs, file_name);
            }
            else
            {
                _c.printf("Invalid property: %.*s\n", current_property.length,
                          current_property.data);
                assert(false);
            }
        }
    }

    return result;
}

skip_whitespace :: (c: *u8) -> *u8
{
    while (is_whitespace(<c))
    {
        c++;
    }

    return c;
}

default_test_config :: () -> Test_Config
{
    result : Test_Config;
    result.expected_fails = { null, 0, 0 };
    result.dont_runs = { null, 0, 0 };
    return result;
}

apply_config :: (tests: *Test_Files, config: *Test_Config)
{

    for (i := 0; i < config.expected_fails.count; i++)
    {
        ef_name := config.expected_fails[i];
        for (fi := 0; fi < tests.files.count; fi++)
        {
            tf := *tests.files.data[fi];

            if (string_equal(ef_name, tf.name))
            {
                tf.flags |= Test_File_Flag.EXPECT_FAIL;
            }
        }
    }

    for (i := 0; i < config.dont_runs.count; i++)
    {
        dr_name := config.dont_runs[i];
        for (fi := 0; fi < tests.files.count; fi++)
        {
            tf := *tests.files.data[fi];

            if (string_equal(dr_name, tf.name))
            {
                tf.flags |= Test_File_Flag.DONT_RUN;
            }
        }
    }
}

report_test_results :: (test_results: Test_Results)
{
    mode_name := enum_to_string(test_results.mode);
    _c.printf("\n%s:\n", mode_name.data);

    success_count := test_results.total_file_count - test_results.fail_file_count;
    _c.printf("\t%d/%d succeeded\n", success_count, test_results.total_file_count);

    only_expected_failures := true;
    if (test_results.expected_fail_count != test_results.fail_file_count)
    {
        only_expected_failures = false;
    }


    os.save_terminal_state();

    switch (test_results.mode)
    {
        case Test_Mode.COMPILING:
        {
            if (!only_expected_failures) os.set_terminal_color(Terminal_Color.RED, true);
            _c.printf("\t%d/%d failed to compile\n", test_results.fail_file_count,
                      test_results.total_file_count);
            os.reset_terminal_state();
            _c.printf("\t%d/%d failures expected\n", test_results.expected_fail_count,
                      test_results.fail_file_count);
        }

        case Test_Mode.RUNNING_BYTECODE, Test_Mode.RUNNING_LLVM:
        {
            if (!only_expected_failures)
            {
                os.set_terminal_color(Terminal_Color.RED, true);
                _c.printf("\t%d/%d failed to compile/run\n", test_results.fail_file_count,
                        test_results.total_file_count);
                _c.printf("\t%d/%d failures expected\n", test_results.expected_fail_count,
                        test_results.fail_file_count);
                os.reset_terminal_state();
            }

            _c.printf("\t%d tests skipped\n", test_results.dont_run_file_count);
        }
    }
}

is_alpha :: (c: u8) -> bool
{
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

is_num :: (c: u8) -> bool
{
    return (c >= '0' && c <= '9');
}

is_alpha_num :: (c: u8) -> bool
{
    return (is_alpha(c) || is_num(c));
}

is_ident :: (c: u8) -> bool
{
    return is_alpha_num(c) || c == '_' || c == '.';
}

is_whitespace :: (c: u8) -> bool
{
    return c == ' ' || c == '\t' || c == '\n';
}

usage :: ()
{
    _c.printf("Usage: ztest TEST_FOLDER\n");
}

