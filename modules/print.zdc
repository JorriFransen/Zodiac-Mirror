
_std :: import std;
using _std;

Format_Spec_Int :: struct
{
    value        : u64;
    type         : *Type_Info;
    min_digits   : u32;
    base         : u32;
    prepend_char : u8;
}

format_int :: (value: $T, min_digits: u32, base: u32) -> Format_Spec_Int
{
    return format_int((:u64)value, get_type_info(T), min_digits, base);
}

format_int :: (value: u64, type_info: *Type_Info, min_digits: u32, base: u32) -> Format_Spec_Int
{
    result : Format_Spec_Int;

    result.value = value;
    result.type = type_info;
    result.min_digits = min_digits;
    result.base = base;
    result.prepend_char = '0';

    return result;
}


print :: (any: Any)
{
    array : Array(u8) = { null, 0, 0 };
    print_a(*array, any);

    output_ar(make_array_ref(array));

    array_free(*array);
}

print :: (fmt: *u8, v: ...)
{
    array : Array(u8) = { null, 0, 0 };
    defer array_free(*array);

    start := fmt;
    length := 0;
    fmt_length := string_length(fmt);

    va_idx := 0;

    for (i : s64 = 0; i < fmt_length; i++)
    {
        if (fmt[i] == '%')
        {
            if (length)
            {
                print_cstr_a(*array, start, length);
                length = 0;
            }

            start = *(fmt[i + 1]);
            assert(va_idx < v.count);
            print_a(*array, v[va_idx]);
            va_idx++;
        }
        else
        {
            length++;
        }
    }

    if (length)
    {
        print_cstr_a(*array, start, length);
    }

    assert(va_idx == v.count);

    output_ar(make_array_ref(array));
}

print_a :: (arr: *Array(u8), any: Any)
{
    assert(any.value);
    ts := any.type_info;

    switch (ts.kind)
    {
        case Type_Info_Kind.POINTER:
        {
            u8_ptr_info := get_type_info(*u8);
            cstr_ptr : **u8 = (:**u8)any.value;
            if (ts == u8_ptr_info)
            {
                print_cstr_a(arr, <cstr_ptr);
            }
            // else if (ts == (get_type_info(*void)))
            // {
            //     assert(false);
            // }
            else
            {
                print_cstr_a(arr, "0x");
                print_unsigned_a(arr, any.value, ts.byte_size, 16, 0, '0');
            }
        }

        case Type_Info_Kind.BASE:
        {
            if (ts.flags & Type_Info_Flags.INT)
            {
                signed : bool = (:bool)(ts.flags & Type_Info_Flags.SIGNED);
                if (signed) print_signed_a(arr, any.value, ts.byte_size, 10, 0, '0');
                else        print_unsigned_a(arr, any.value, ts.byte_size, 10, 0, '0');
            }
            else if (ts.flags & Type_Info_Flags.FLOAT)
            {
                buf : [1024]u8;
                if (ts == get_type_info(float))
                {
                    f := (:float)(<(:*float)any.value);
                    _c.sprintf(*buf[0], "%f", f);
                }
                else if (ts == get_type_info(double))
                {
                    d := (:double)(<(:*double)any.value);
                    _c.sprintf(*buf[0], "%f", d);
                }
                else assert(false);

                print_cstr_a(arr, *buf[0]);
            }
            else if (ts == get_type_info(void)) { assert(false); }
            else if (ts == get_type_info(*void)) { assert(false); }
            else assert(false);
        }

        case Type_Info_Kind.STATIC_ARRAY:
        {
            print_cstr_a(arr, "[ ");

            base_ptr := (:*u8)any.value;
            for (i : u64 = 0; i < ts.static_array.count; i++)
            {
                if (i > 0)
                {
                    print_cstr_a(arr, ", ");
                }

                member_ptr := base_ptr + (ts.static_array.base.byte_size * i);
                member_any := make_any(ts.static_array.base, member_ptr);
                print_a(arr, member_any);
            }
            print_cstr_a(arr, " ]");
        }

        case Type_Info_Kind.STRUCT, Type_Info_Kind.UNION:
        {
            if (ts == get_type_info(Format_Spec_Int))
            {
                fsi := (:*Format_Spec_Int)any.value;

                if (fsi.type.kind == Type_Info_Kind.BASE)
                {
                    assert(fsi.type.flags & Type_Info_Flags.INT);
                }
                else
                {
                    assert(fsi.type.kind == Type_Info_Kind.POINTER);
                }

                if (fsi.type.flags & Type_Info_Flags.SIGNED)
                {
                    print_signed_a(arr, *fsi.value, fsi.type.byte_size, fsi.base, fsi.min_digits,
                                   fsi.prepend_char);
                }
                else
                {
                    print_unsigned_a(arr, *fsi.value, fsi.type.byte_size, fsi.base,
                                     fsi.min_digits, fsi.prepend_char);
                }

                break;
            }

            print_cstr_a(arr, "{ ");
            member_ptr := (:*u8)any.value;
            for (i : u64 = 0; i < ts.aggregate.count; i++)
            {
                if (i > 0)
                {
                    print_cstr_a(arr, ", ");
                }
                member_info := ts.aggregate.first[i];
                print_cstr_a(arr, member_info.name.data, (:s64)member_info.name.length);
                print_cstr_a(arr, "=");

                if (member_info.type.kind == Type_Info_Kind.POINTER)
                {
                    print_cstr_a(arr, "0x");
                    u64_ptr := (:*u64)member_ptr;
                    ptr := format_int(<u64_ptr, member_info.type, 0, 16);
                    print_a(arr, ptr);
                }
                else
                {
                    member_any := make_any(member_info.type, member_ptr);
                    print_a(arr, member_any);
                }

                if (ts.kind == Type_Info_Kind.STRUCT)
                    member_ptr += member_info.type.byte_size;
            }
            print_cstr_a(arr, " }");
        }

        case Type_Info_Kind.ENUM:
        {
            u64_ptr := (:*u64)any.value;
            enum_str := enum_to_string(<u64_ptr, any.type_info);

            print_cstr_a(arr, enum_str.data, (:s64)enum_str.length);
        }

        default: assert(false);
    }
}

print_signed_a :: (arr: *Array(u8), value_ptr: *void, byte_size: u64, base: u32, min_digits: u32,
                   prepend_char: u8)
{
    assert(value_ptr);
    s64_ptr := (:*s64)value_ptr;

    switch (byte_size)
    {
        case 1: print_signed_64_a(arr, (:s8)(<s64_ptr), base, min_digits, prepend_char);
        case 2: print_signed_64_a(arr, (:s16)(<s64_ptr), base, min_digits, prepend_char);
        case 4: print_signed_64_a(arr, (:s32)(<s64_ptr), base, min_digits, prepend_char);
        case 8: print_signed_64_a(arr, (:s64)(<s64_ptr), base, min_digits, prepend_char);
        default: assert(false);
    }
}

print_unsigned_a :: (arr: *Array(u8), value_ptr: *void, byte_size: u64, base: u32, min_digits: u32,
                     prepend_char: u8)
{
    u64_ptr := (:*u64)value_ptr;

    switch (byte_size)
    {
        case 1: print_unsigned_64_a(arr, (:u8)(<u64_ptr), base, min_digits, prepend_char);
        case 2: print_unsigned_64_a(arr, (:u16)(<u64_ptr), base, min_digits, prepend_char);
        case 4: print_unsigned_64_a(arr, (:u32)(<u64_ptr), base, min_digits, prepend_char);
        case 8: print_unsigned_64_a(arr, (:u64)(<u64_ptr), base, min_digits, prepend_char);
        default: assert(false);
    }
}

print_signed_64_a :: (arr: *Array(u8), value: $T, base: u32, min_digits: u32, prepend_char: u8)
{
    buf : [32]u8;
    cursor : *u8 = *(buf[0]);
    length : s64 = 0;

    print_sign := false;
    if (value < 0)
    {
        value = -value;
        print_sign = true;
    }

    while (true)
    {
        rem := value % (:T)base;
        value = value / (:T)base;

        <cursor = u8_to_digit((:u8)rem);
        cursor++;
        length++;

        if (value == 0) break;
    }

    missing_digits := min_digits - length;
    for (i := 0; i < missing_digits; i++)
    {
        array_add(arr, prepend_char);
    }

    if (print_sign) array_add(arr, '-');

    cursor = *(buf[length - 1]);
    for (i := 0; i < length; i++)
    {
        array_add(arr, <cursor);
        cursor--;
    }
}

print_unsigned_64_a :: (arr: *Array(u8), value: $T, base: u32, min_digits: u32, prepend_char: u8)
{
    buf : [32]u8;
    cursor : *u8 = *(buf[0]);
    length : s64 = 0;

    assert(base > 0);
    assert(base <= 16);

    while (true)
    {
        rem := value % (:T)base;
        oldval := value;
        value = value / (:T)base;

        <cursor = u8_to_digit((:u8)rem);
        cursor++;
        length++;

        if (value == 0) break;
    }

    missing_digits := min_digits - length;
    for (i := 0; i < missing_digits; i++)
    {
        array_add(arr, prepend_char);
    }

    <cursor = '\0';

    cursor = *(buf[length - 1]);
    for (i := 0; i < length; i++)
    {
        array_add(arr, <cursor);
        cursor--;
    }
}

// _u8_to_digit : [16]u8 = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
//                           'a', 'b', 'c', 'd', 'e', 'f'};

u8_to_digit :: (value: u8) -> u8
{
    _u8_to_digit : [16]u8 = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                                'a', 'b', 'c', 'd', 'e', 'f'};
    assert(value < 16);
    return _u8_to_digit[value];
}

print_cstr_a :: (arr: *Array(u8), cstr: *u8, length: s64)
{
    for (i := 0; i < length; i++)
    {
        array_add(arr, cstr[i]);
    }
}

print_cstr_a :: (arr: *Array(u8), cstr: *u8)
{
    length := (:s64)string_length(cstr);
    print_cstr_a(arr, cstr, length);
}

output_ar :: (array_ref: Array_Ref(u8))
{
    _c.printf("%.*s", array_ref.count, array_ref.data);
}

