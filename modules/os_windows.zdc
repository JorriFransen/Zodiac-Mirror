
_builtin :: import builtin;
using _builtin;

static_assert(PLATFORM_WINDOWS);

std :: import std;
using std;

_og :: import os_generic;
using _og;

_thread :: import thread;
using _thread;

string_builder :: import string_builder;

LPCSTR :: typedef *u8;
LPSTR :: typedef *u8;
PVOID :: typedef *void;
DWORD :: typedef u32;
WORD :: typedef u16;
SHORT :: typedef s16;
TCHAR :: typedef u8;
BYTE :: typedef u8;
HANDLE :: typedef *void;
BOOL :: typedef s64;
LPBYTE :: typedef *BYTE;
LPVOID :: typedef *void;
LPDWORD :: typedef *DWORD;
DWORD_PTR :: typedef u64;
SIZE_T :: typedef u64;
LPSECURITY_ATTRIBUTES :: typedef *SECURITY_ATTRIBUTES;
LPSTARTUPINFOA :: typedef *STARTUPINFOA;
LPPROCESS_INFORMATION :: typedef *PROCESS_INFORMATION;

THREAD_START_ROUTINE :: typedef (lpThreadParameter: LPVOID) -> DWORD;

TRUE  : BOOL : 1;
FALSE : BOOL : 0;

#foreign GetFullPathNameA :: (lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: *LPSTR) -> DWORD;
#foreign GetFileAttributesA :: (lpFileName: LPCSTR) -> DWORD;
#foreign FindFirstFileA :: (lpFileName: LPCSTR, lpFindFileData: *WIN32_FIND_DATA) -> HANDLE;
#foreign FindNextFileA :: (hFindFile: HANDLE, lpFindFileData: *WIN32_FIND_DATA) -> BOOL;
#foreign FindClose :: (hFindFile: HANDLE) -> BOOL;
#foreign DeleteFileA :: (lpFileName: LPCSTR) -> BOOL;
#foreign GetLastError :: () -> DWORD;
#foreign GetStdHandle :: (nStdHandle: DWORD) -> HANDLE;

#foreign GetConsoleScreenBufferInfo :: (
            hConsoleOutput: HANDLE,
            lpConsoleScreenBufferInfo: *CONSOLE_SCREEN_BUFFER_INFO
    ) -> BOOL;

#foreign SetConsoleTextAttribute :: (hConsoleOutput: HANDLE, wAttributes: WORD) -> BOOL;
#foreign _aligned_malloc :: (size: u64, alignment: u64) -> *void;
#foreign _aligned_free :: (ptr: *void) -> void; 
#foreign GetSystemInfo :: (lpSystemInfo: *SYSTEM_INFO) -> void;
#foreign CreateThread :: (
        lpThreadAttributes: *SECURITY_ATTRIBUTES, dwStackSize: DWORD, lpStartAddress: *THREAD_START_ROUTINE,
        lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD
    ) -> HANDLE;

#foreign WaitForSingleObject :: (hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;
#foreign GetExitCodeThread :: (hthread: HANDLE, lpExitCode: LPDWORD) -> BOOL;
#foreign CloseHandle :: (hObject: HANDLE) -> BOOL;

#foreign CreateProcessA :: (
    pApplicationName: LPCSTR,
    lpCommandLine: LPSTR,
    lpProcessAttributes: LPSECURITY_ATTRIBUTES,
    lpThreadAttributes: LPSECURITY_ATTRIBUTES,
    bInheritHandles: BOOL,
    dwCreationFlags: DWORD,
    lpEnvironment: LPVOID,
    lpCurrentDirectory: LPCSTR,
    pStartupInfo: LPSTARTUPINFOA,
    lpProcessInformation: LPPROCESS_INFORMATION
) -> bool;

#foreign SearchPathA :: (
    lpPath: LPCSTR,
    lpFileName: LPCSTR,
    lpExtension: LPCSTR,
    nBufferLength: DWORD,
    lpBuffer: LPSTR,
    lpFilePart: *LPSTR
) -> DWORD;

#foreign GetExitCodeProcess :: (hProcess: HANDLE, lpExitCode: LPDWORD) -> BOOL;

#foreign CreatePipe :: (
    hReadPipe: *HANDLE,
    hWritePipe: *HANDLE,
    lpPipeAttributes: LPSECURITY_ATTRIBUTES,
     nSize: DWORD
) -> BOOL;

HANDLE_FLAG_INHERIT            : DWORD : 0x01;
HANDLE_FLAG_PROTECT_FROM_CLOSE : DWORD : 0x02;

#foreign SetHandleInformation :: (
    hObject: HANDLE,
    dwMask: DWORD,
    dwFlags: DWORD
) -> BOOL;

#foreign ReadFile :: (
    hFile: HANDLE,
    lpBuffer: LPVOID,
    nNumberOfByutesToRead: DWORD,
    lpNumberOfBytesRead: *DWORD,
    lpOverlapped: *OVERLAPPED
) -> BOOL;

OVERLAPPED :: struct
{
    Internal: *u64;
    InternalHigh: *u64;
    DUMMYUNIONNAME :: union 
    {
        DUMMYSTRUCTNAME :: struct
        {
            Offset: DWORD;
            OffsetHigh: DWORD;
        }
    }
    hEvent: HANDLE;
}

INVALID_HANDLE_VALUE :: -1;
STD_INPUT_HANDLE   : DWORD : -10;
STD_OUTPUT_HANDLE  : DWORD : -11;
STD_ERROR_HANDLE   : DWORD : -12;

INVALID_FILE_ATTRIBUTES :: -1;
FILE_ATTRIBUTE_DIRECTORY :: 16;

ERROR_FILE_NOT_FOUND :: 2;
ERROR_NO_MORE_FILES :: 18;

MAX_PATH :: 256;

FOREGROUND_BLUE      : WORD : 1;
FOREGROUND_GREEN     : WORD : 2;
FOREGROUND_RED       : WORD : 4;
FOREGROUND_INTENSITY : WORD : 8;

STARTF_USESTDHANDLES : DWORD : 0x0100;

WAIT_ABANDONED : DWORD : 0x0080; 
WAIT_OBJECT_0  : DWORD : 0x0000;
WAIT_TIMEOUT   : DWORD : 0x0102;
WAIT_FAILED    : DWORD : 0xFFFFFF;

INFINITE : DWORD : -1;

FILETIME :: struct 
{
    dwLowDateTime : DWORD;
    dwHighDateTime : DWORD;
}

WIN32_FIND_DATA :: struct
{
    dwFileAttributes   : DWORD;
    ftCreationTime     : FILETIME;
    ftLastAccessTime   : FILETIME;
    ftLastWriteTime    : FILETIME;
    nFileSizeHigh      : DWORD;
    nFileSizeLow       : DWORD;
    dwReserved0        : DWORD;
    dwReserved1        : DWORD;
    cFileName          : [MAX_PATH]TCHAR;
    cAlternateFileName : [14]TCHAR;
}

COORD :: struct
{
    X: SHORT;
    Y: SHORT;
}

SMALL_RECT :: struct
{
    Left   : SHORT;
    Top    : SHORT;
    Right  : SHORT;
    Bottom : SHORT;
}

CONSOLE_SCREEN_BUFFER_INFO :: struct 
{
    dwSize              : COORD;
    dwCursorPosition    : COORD;
    wAttributes         : WORD;
    srWindow            : SMALL_RECT;
    dwMaximumWindowSize : COORD;
}

SYSTEM_INFO :: struct
{
    DUMMYUNIONNAME :: union
    {
        dwOemId : DWORD;
        DUMMYSTRUCTNAME :: struct
        {
            wProcessorArchitecture : WORD;
            wReserved : WORD;
        }
    }
    dwPageSize : DWORD;
    lpMinimumApplicationAddress : LPVOID;
    lpMaximumApplicationAddress : LPVOID;
    dwActiveProcessorMask : DWORD_PTR;
    dwNumberOfProcessors : DWORD;
    dwProcessorType : DWORD;
    dwAllocationGranularity : DWORD;
    wProcessorLevel : WORD;
    wProcessorRevision : WORD;
}

#foreign PeekNamedPipe :: (
    hNamedPipe: HANDLE,
    lpBuffer: *void,
    nBufferSize: DWORD,
    lpBytesRead: *DWORD,
    lpTotalBytesAvail: *DWORD,
    lpBytesLeftThisMessage: *DWORD
) -> bool;

SECURITY_ATTRIBUTES :: struct
{
    nLength : DWORD;
    ____padding____ : u32; // @TODO: @FIXME: Alignment should fix this.... 
    lpSecurityDescriptor: LPVOID;
    bInheritHandle: BOOL;
}

STARTUPINFOA :: struct
{
    cb: DWORD;
    ____padding____ : u32; // @TODO: @FIXME: Alignment should fix this.... 
    lpReserved: LPSTR;
    lpDesktop: LPSTR;
    lpTitle: LPSTR;
    dwX: DWORD;
    dwY: DWORD;
    dwXSize: DWORD;
    dwYSize: DWORD;
    dwXCountChars: DWORD;
    dwYCountChars: DWORD;
    dwFillAttribute: DWORD;
    dwFlags: DWORD;
    wShowWindow: WORD;
    cbReserved2: WORD;
    ____padding____2 : u32; // @TODO: @FIXME: Alignment should fix this.... 
    pReserved2: LPBYTE;
    hStdInput: HANDLE;
    hStdOutput: HANDLE;
    hStdError:  HANDLE;
}

PROCESS_INFORMATION :: struct
{
    hProcess: HANDLE;
    hThread: HANDLE;
    dwProcessId: DWORD;
    dwThreadId: DWORD;
}

get_full_path :: (name: String) -> String
{
    length := GetFullPathNameA(name.data, 0, null, null);

    result : String;
    result.data = (:*u8)_c.malloc(length);
    result.length = length - 1;

    l := GetFullPathNameA(name.data, length, result.data, null);
    assert(l == result.length);

    return result;
}

delete_file :: (path: String) -> bool
{
    result := DeleteFileA(path.data); 

    return (:bool)result;
}

is_directory :: (path: String) -> bool
{
    result := GetFileAttributesA(path.data);
    if (result == INVALID_FILE_ATTRIBUTES)
    {
        return false;
    }

    return (:bool)(result & FILE_ATTRIBUTE_DIRECTORY);
}

is_regular_file :: (path: String) -> bool
{
    result := GetFileAttributesA(path.data);
    if (result == INVALID_FILE_ATTRIBUTES)
    {
        return false;
    }

    return !((:bool)(result & FILE_ATTRIBUTE_DIRECTORY));
}

list_files_in_directory :: (path: String) -> Array(String)
{
    search_path := string_append(path, "\\*");
    defer _c.free(search_path.data);

    find_data : WIN32_FIND_DATA;
    handle := FindFirstFileA(search_path.data, *find_data);
    if (handle == INVALID_HANDLE_VALUE)
    {
        error := GetLastError();
        if (error == ERROR_FILE_NOT_FOUND)
        {
            _c.printf("Path is not a directory: '%s'\n", path.data);
            assert(false);
        }
        else assert(false);
    }

    assert(handle != INVALID_HANDLE_VALUE);

    result : Array(String) = { null, 0, 0 };
    array_add(*result, string_new(*find_data.cFileName[0]));

    while (FindNextFileA(handle, *find_data) != 0)
    {
        array_add(*result, string_new(*find_data.cFileName[0]));
    }

    assert(GetLastError() == ERROR_NO_MORE_FILES);


    FindClose(handle);

    return result;
}

Terminal_State :: struct
{
    color: Terminal_Color;
    bold : bool;
}

get_terminal_state :: () -> Terminal_State
{
    terminal_handle := GetStdHandle(STD_OUTPUT_HANDLE);
    info : CONSOLE_SCREEN_BUFFER_INFO;

    r := GetConsoleScreenBufferInfo(terminal_handle, *info);
    assert(r);

    red   := (:bool)(info.wAttributes & FOREGROUND_RED);
    green := (:bool)(info.wAttributes & FOREGROUND_GREEN);
    blue  := (:bool)(info.wAttributes & FOREGROUND_BLUE);
    
    result : Terminal_State;

    if      (red && green && blue) result.color = Terminal_Color.WHITE;
    else if (red && green)         result.color = Terminal_Color.YELLOW;
    else if (red && blue)          result.color = Terminal_Color.PURPLE; 
    else if (green && blue)        result.color = Terminal_Color.CYAN;
    else if (red)                  result.color = Terminal_Color.RED;
    else if (green)                result.color = Terminal_Color.GREEN;
    else if (blue)                 result.color = Terminal_Color.BLUE;
    else                           result.color = Terminal_Color.BLACK;

    result.bold = (:bool)(info.wAttributes & FOREGROUND_INTENSITY);

    return result;
}

set_terminal_state :: (new_state: Terminal_State)
{
    terminal_handle := GetStdHandle(STD_OUTPUT_HANDLE);
    new_attribs : WORD = 0;
    
    red := false;
    green := false;
    blue := false;

    using Terminal_Color;

    switch (new_state.color)
    {
        case WHITE: { red = true; green = true; blue = true; }
        case YELLOW: { red = true; green = true; }
        case PURPLE: { red = true; blue = true; }
        case CYAN: { green = true; blue = true; }
        case RED: { red = true; }
        case GREEN: { green = true; }
        case BLUE: { blue = true; }
        case BLACK: { }
        default: assert(false);
    }

    if (red)   new_attribs = new_attribs | FOREGROUND_RED;     
    if (green) new_attribs = new_attribs | FOREGROUND_GREEN;     
    if (blue)  new_attribs = new_attribs | FOREGROUND_BLUE;     

    if (new_state.bold) new_attribs = new_attribs | FOREGROUND_INTENSITY;

    info : CONSOLE_SCREEN_BUFFER_INFO;
    r := GetConsoleScreenBufferInfo(terminal_handle, *info);
    assert(r);

    old_attribs : WORD = info.wAttributes & ~(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE |
                                              FOREGROUND_INTENSITY);
    new_attribs = old_attribs | new_attribs;
    SetConsoleTextAttribute(terminal_handle, new_attribs);  
}

_saved_terminal_state : Terminal_State;

save_original_terminal_state :: () {
    _saved_terminal_state = get_terminal_state();    
}

reset_terminal_state :: () {
    set_terminal_state(_saved_terminal_state);
}

set_terminal_color :: (new_color: Terminal_Color, bold: bool)
{
    state := get_terminal_state();
    state.color = new_color;
    state.bold = bold;
    set_terminal_state(state);
}

get_page_size :: () -> s64
{
    info : SYSTEM_INFO;
    GetSystemInfo(*info);
    return (:s64)info.dwPageSize;
}

alloc_aligned :: (alignment: s64, size: s64) -> *void
{
    result := _aligned_malloc((:u64)size, (:u64)alignment);
    assert(result);
    return result;
}

free_aligned :: (ptr: *void) 
{
    _aligned_free(ptr);
}

__zodiac_start_thread :: (_thread_start_info: *void) -> DWORD 
{
    thread_start_info := (:*Thread_Start_Info)_thread_start_info;

    _thread.atomic_cond_wait(*thread_start_info.signal_started, null);
    thread_func := thread_start_info.thread_routine;
    thread := thread_start_info.thread;
    _thread.atomic_cond_signal(*thread_start_info.signal_thread_copied);

    // return null;
    ret_val := thread_func(*thread);
    return (:DWORD)ret_val;
}

_create_thread :: (start_info: *Thread_Start_Info) -> bool
{
    win_handle := CreateThread(null, 0,  *__zodiac_start_thread, start_info, 0, null);
    if (!win_handle) return false;

    start_info.thread.handle = (:u64)win_handle;
    return true;
}

_join_thread :: (thread: Thread) -> *void
{
    handle := (:HANDLE)thread.handle
    WaitForSingleObject(handle, (:u32)INFINITE);

    ret_val: u32;
    if (!GetExitCodeThread(handle, *ret_val))
    {
        assert(false);
    } 

    close_ret := CloseHandle(handle);
    assert(close_ret);

    return (:*void) ret_val;
}

Execute_Process_Error :: enum
{
    NONE;
    PIPE_CREATE_FAILED;
    PIPE_READ_FAILED;
    FORK_FAILED;
    UNEXPECTED;
}

// @TODO: This should be in os_generic (in os.zdc ideally, but we can't do circular imports)
Execute_Process_Result :: struct
{
    exit_code : u32;
    stdout    : String;
    stderr    : String;
}

execute_process :: (exe_name: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    _args: Array(*u8) = { null, 0, 0 };
    defer array_free(*_args);

    for (i := 0; i < args.count; i++) {
        any_arg := args[i];
        assert(any_arg.type_info == get_type_info(*u8));
        array_add(*_args, <(:**u8)(any_arg.value));
    }

    return _execute_process(exe_name, make_array_ref(_args));
}

_execute_process :: (exe_name: String, args: Array_Ref(*u8)) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    result : Execute_Process_Result = { 1, { null, 0 }, { null, 0 } };

    CMD_PATH_BUF_LEN :: 4096;
    cmd_path : [CMD_PATH_BUF_LEN]u8;
    file_part_ptr : *u8 = null;
    sp_result := SearchPathA(null, exe_name.data, ".exe", (:DWORD)CMD_PATH_BUF_LEN, *cmd_path[0], *file_part_ptr);

    if (sp_result == 0) {
        // @TODO: Handle this
        err_code := GetLastError();
        assert(false);
    } else if (sp_result > CMD_PATH_BUF_LEN) {
        // @TODO: Handle this
        assert(false); // Buffer is not big enough
    }

    exe_path := string_ref(*(cmd_path[0]), sp_result);

    sec_attr : SECURITY_ATTRIBUTES;
    sec_attr.nLength = (:DWORD)sizeof(SECURITY_ATTRIBUTES);
    sec_attr.bInheritHandle = TRUE;
    sec_attr.lpSecurityDescriptor = null;

    stdin_read_handle : HANDLE = null;
    stdin_write_handle : HANDLE = null;
    stdout_read_handle : HANDLE = null;
    stdout_write_handle : HANDLE = null;
    stderr_read_handle : HANDLE = null;
    stderr_write_handle : HANDLE = null;

    pipe_res := CreatePipe(*stdout_read_handle, *stdout_write_handle, *sec_attr, 0);
    if (!pipe_res) {
        err_code := GetLastError();
        _c.printf("CreatePipe failed with error: %d\n", err_code);
        assert(false);
    }
    defer CloseHandle(stdout_read_handle);
    defer CloseHandle(stdout_write_handle);
    pipe_res = SetHandleInformation(stdout_read_handle, HANDLE_FLAG_INHERIT, 0);
    assert(pipe_res);

    pipe_res = CreatePipe(*stdin_read_handle, *stdin_write_handle, *sec_attr, 0);
    if (!pipe_res) {
        err_code := GetLastError();
        _c.printf("CreatePipe failed with error: %d\n", err_code);
        assert(false);
    }
    pipe_res = SetHandleInformation(stdin_write_handle, HANDLE_FLAG_INHERIT, 0);
    defer CloseHandle(stdin_read_handle);
    defer CloseHandle(stdin_write_handle);
    assert(pipe_res);

    pipe_res = CreatePipe(*stderr_read_handle, *stderr_write_handle, *sec_attr, 0);
    if (!pipe_res) {
        err_code := GetLastError();
        _c.printf("CreatePipe failed with error: %d\n", err_code);
        assert(false);
    }
    defer CloseHandle(stderr_read_handle);
    defer CloseHandle(stderr_write_handle);
    pipe_res = SetHandleInformation(stderr_read_handle, HANDLE_FLAG_INHERIT, 0);
    assert(pipe_res);

    process_info : PROCESS_INFORMATION;
    startup_info : STARTUPINFOA;

    _c.memset(*process_info, 0, sizeof(PROCESS_INFORMATION));

    _c.memset(*startup_info, 0, sizeof(STARTUPINFOA));
    startup_info.cb = (:DWORD)sizeof(STARTUPINFOA);
    startup_info.dwFlags |= STARTF_USESTDHANDLES;
    startup_info.hStdInput = stdin_read_handle; 
    startup_info.hStdOutput = stdout_write_handle;
    startup_info.hStdError = stderr_write_handle;

    sb := string_builder.create(512);
    defer string_builder.free(*sb);

    string_builder.append(*sb, exe_name.data);
    string_builder.append(*sb, " ");
    for (i := 0; i < args.count; i++) {
        string_builder.append(*sb, args[i]);
        string_builder.append(*sb, " ");
    }

    arg_str := string_builder.copy_to_string(*sb);
    defer _c.free(arg_str.data);

    cp_result := CreateProcessA(exe_path.data, arg_str.data, null, null, TRUE, 0, null, null, 
                                *startup_info, *process_info);

    if (!cp_result) {
        err_code := GetLastError();
        _c.fprintf(stderr, "CreateProcessA failed, error: %d\n", err_code);
        if (err_code == ERROR_FILE_NOT_FOUND) {
            assert(false);
        }
        assert(false);
    }

    stdout_sb := string_builder.create(1024);
    stderr_sb := string_builder.create(1024);
    defer string_builder.free(*stdout_sb);
    defer string_builder.free(*stderr_sb);

    READ_BUF_LEN :: 1024;
    read_buf : [READ_BUF_LEN]u8;

    running := true;
    while (running)
    {
        _read_available(stdout_read_handle, *stdout_sb);
        _read_available(stderr_read_handle, *stderr_sb);

        proc_wait_res := WaitForSingleObject(process_info.hProcess, 0);
        if (proc_wait_res == WAIT_OBJECT_0) {
            break;
        }
    }

    _read_available(stdout_read_handle, *stdout_sb);
    _read_available(stderr_read_handle, *stderr_sb);

    result.stdout = string_builder.copy_to_string(*stdout_sb);
    result.stderr = string_builder.copy_to_string(*stderr_sb);

    exit_code : DWORD;

    exit_code_res := GetExitCodeProcess(process_info.hProcess, *exit_code);
    assert(exit_code_res);

    close_res := CloseHandle(process_info.hProcess);
    assert(close_res);
    close_res = CloseHandle(process_info.hThread);
    assert(close_res);

    result.exit_code = exit_code;
    return Execute_Process_Error.NONE, result;

}

_read_available :: (r_handle: HANDLE, sb: *string_builder.String_Builder) 
{
    READ_BUF_LEN :: 1024;
    read_buf : [READ_BUF_LEN]u8;

    reading := true;
    while (reading) {
        bytes_available : DWORD;
        peek_res := PeekNamedPipe(r_handle, null, 0, null, *bytes_available, null);
        assert(peek_res);

        if (bytes_available <= 0) 
        {
            reading = false;
            break;
        }

        read : DWORD;
        read_res := ReadFile(r_handle, *(read_buf[0]), (:DWORD)READ_BUF_LEN, *read, null);
        assert(read_res);

        if (read > 0)
        {
            string_builder.append(sb, *(read_buf[0]), read);
        }
        else 
        {
            reading = false;
        }
    }
}

execute_process_shell :: (command: String, args: ...) ->
    Execute_Process_Error #required,
    Execute_Process_Result
{
    sb := string_builder.create(256);
    defer string_builder.free(*sb);

    _array : Array(*u8) = { null, 0, 0 };
    defer array_free(*_array);

    string_builder.append(*sb, command.data);
    string_builder.append(*sb, " ");

    for (i := 0; i < args.count; i++)
    {
        any := args[i];
        assert(any.type_info == get_type_info(*u8));
        _arg := <((:**u8)any.value);
        string_builder.append(*sb, _arg);
    }

    command_str := string_builder.copy_to_string(*sb);
    defer _c.free(command_str.data);

    array_add(*_array, "/c ");
    array_add(*_array, command_str.data);

    return _execute_process("cmd", make_array_ref(_array));
}

execute_process_result_free :: (exec_prog_res: *Execute_Process_Result)
{
    _c.free(exec_prog_res.stdout.data);
    _c.free(exec_prog_res.stderr.data);
}