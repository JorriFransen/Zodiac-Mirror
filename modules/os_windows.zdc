
static_assert(PLATFORM_WINDOWS);

std :: import std;
using std;

_og :: import os_generic;
using _og;

LPCSTR :: typedef *u8;
LPSTR :: typedef *u8;
DWORD :: typedef u32;
WORD :: typedef u16;
SHORT :: typedef s16;
TCHAR :: typedef u8;
HANDLE :: typedef *void;
BOOL :: typedef s64;
LPVOID :: typedef *void;
LPDWORD :: typedef *DWORD;
DWORD_PTR :: typedef u64;

THREAD_START_ROUTINE :: typedef (lpThreadParameter: LPVOID) -> DWORD;

#foreign GetFullPathNameA :: (lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: *LPSTR) -> DWORD;
#foreign GetFileAttributesA :: (lpFileName: LPCSTR) -> DWORD;
#foreign FindFirstFileA :: (lpFileName: LPCSTR, lpFindFileData: *WIN32_FIND_DATA) -> HANDLE;
#foreign FindNextFileA :: (hFindFile: HANDLE, lpFindFileData: *WIN32_FIND_DATA) -> BOOL;
#foreign FindClose :: (hFindFile: HANDLE) -> BOOL;
#foreign GetLastError :: () -> DWORD;
#foreign GetStdHandle :: (nStdHandle: DWORD) -> HANDLE;

#foreign GetConsoleScreenBufferInfo :: (
            hConsoleOutput: HANDLE,
            lpConsoleScreenBufferInfo: *CONSOLE_SCREEN_BUFFER_INFO
    ) -> BOOL;

#foreign SetConsoleTextAttribute :: (hConsoleOutput: HANDLE, wAttributes: WORD) -> BOOL;
#foreign _aligned_malloc :: (size: u64, alignment: u64) -> *void;
#foreign _aligned_free :: (ptr: *void) -> void; 
#foreign GetSystemInfo :: (lpSystemInfo: *SYSTEM_INFO) -> void;
#foreign CreateThread :: (
        lpThreadAttributes: *SECURITY_ATTRIBUTES, dwStackSize: DWORD, lpStartAddress: *THREAD_START_ROUTINE,
        lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD
    ) -> HANDLE;

#foreign WaitForSingleObject :: (hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;
#foreign GetExitCodeThread :: (hthread: HANDLE, lpExitCode: LPDWORD) -> BOOL;
#foreign CloseHandle :: (hObject: HANDLE) -> BOOL;

INVALID_HANDLE_VALUE :: -1;
STD_OUTPUT_HANDLE : DWORD : -11;

INVALID_FILE_ATTRIBUTES :: -1;
FILE_ATTRIBUTE_DIRECTORY :: 16;

ERROR_FILE_NOT_FOUND :: 2;
ERROR_NO_MORE_FILES :: 18;

MAX_PATH :: 256;

FOREGROUND_BLUE      : WORD : 1;
FOREGROUND_GREEN     : WORD : 2;
FOREGROUND_RED       : WORD : 4;
FOREGROUND_INTENSITY : WORD : 8;

INFINITE :: -1;

FILETIME :: struct 
{
    dwLowDateTime : DWORD;
    dwHighDateTime : DWORD;
}

WIN32_FIND_DATA :: struct
{
    dwFileAttributes   : DWORD;
    ftCreationTime     : FILETIME;
    ftLastAccessTime   : FILETIME;
    ftLastWriteTime    : FILETIME;
    nFileSizeHigh      : DWORD;
    nFileSizeLow       : DWORD;
    dwReserved0        : DWORD;
    dwReserved1        : DWORD;
    cFileName          : [MAX_PATH]TCHAR;
    cAlternateFileName : [14]TCHAR;
}

COORD :: struct
{
    X: SHORT;
    Y: SHORT;
}

SMALL_RECT :: struct
{
    Left   : SHORT;
    Top    : SHORT;
    Right  : SHORT;
    Bottom : SHORT;
}

CONSOLE_SCREEN_BUFFER_INFO :: struct 
{
    dwSize              : COORD;
    dwCursorPosition    : COORD;
    wAttributes         : WORD;
    srWindow            : SMALL_RECT;
    dwMaximumWindowSize : COORD;
}

SYSTEM_INFO :: struct
{
    DUMMYUNIONNAME :: union
    {
        dwOemId : DWORD;
        DUMMYSTRUCTNAME :: struct
        {
            wProcessorArchitecture : WORD;
            wReserved : WORD;
        }
    }
    dwPageSize : DWORD;
    lpMinimumApplicationAddress : LPVOID;
    lpMaximumApplicationAddress : LPVOID;
    dwActiveProcessorMask : DWORD_PTR;
    dwNumberOfProcessors : DWORD;
    dwProcessorType : DWORD;
    dwAllocationGranularity : DWORD;
    wProcessorLevel : WORD;
    wProcessorRevision : WORD;
}

SECURITY_ATTRIBUTES :: struct
{
    nLength : DWORD;
    lpSecurityDescriptor: LPVOID;
    bInheritHandle: BOOL;
}

get_full_path :: (name: String) -> String
{
    length := GetFullPathNameA(name.data, 0, null, null);

    result : String;
    result.data = (:*u8)_c.malloc(length);
    result.length = length - 1;

    l := GetFullPathNameA(name.data, length, result.data, null);
    assert(l == result.length);

    return result;
}

is_directory :: (path: String) -> bool
{
    result := GetFileAttributesA(path.data);
    if (result == INVALID_FILE_ATTRIBUTES)
    {
        return false;
    }

    return (:bool)(result & FILE_ATTRIBUTE_DIRECTORY);
}

is_regular_file :: (path: String) -> bool
{
    result := GetFileAttributesA(path.data);
    if (result == INVALID_FILE_ATTRIBUTES)
    {
        return false;
    }

    return !((:bool)(result & FILE_ATTRIBUTE_DIRECTORY));
}

list_files_in_directory :: (path: String) -> Array(String)
{
    search_path := string_append(path, "\\*");
    defer _c.free(search_path.data);

    find_data : WIN32_FIND_DATA;
    handle := FindFirstFileA(search_path.data, *find_data);
    if (handle == INVALID_HANDLE_VALUE)
    {
        error := GetLastError();
        if (error == ERROR_FILE_NOT_FOUND)
        {
            _c.printf("Path is not a directory: '%s'\n", path.data);
            assert(false);
        }
        else assert(false);
    }

    assert(handle != INVALID_HANDLE_VALUE);

    result : Array(String) = { null, 0, 0 };
    array_add(*result, string_new(*find_data.cFileName[0]));

    while (FindNextFileA(handle, *find_data) != 0)
    {
        array_add(*result, string_new(*find_data.cFileName[0]));
    }

    assert(GetLastError() == ERROR_NO_MORE_FILES);


    FindClose(handle);

    return result;
}

Terminal_State :: struct
{
    color: Terminal_Color;
    bold : bool;
}

get_terminal_state :: () -> Terminal_State
{
    terminal_handle := GetStdHandle(STD_OUTPUT_HANDLE);
    info : CONSOLE_SCREEN_BUFFER_INFO;

    r := GetConsoleScreenBufferInfo(terminal_handle, *info);
    assert(r);

    red   := (:bool)(info.wAttributes & FOREGROUND_RED);
    green := (:bool)(info.wAttributes & FOREGROUND_GREEN);
    blue  := (:bool)(info.wAttributes & FOREGROUND_BLUE);
    
    result : Terminal_State;

    if      (red && green && blue) result.color = Terminal_Color.WHITE;
    else if (red && green)         result.color = Terminal_Color.YELLOW;
    else if (red && blue)          result.color = Terminal_Color.PURPLE; 
    else if (green && blue)        result.color = Terminal_Color.CYAN;
    else if (red)                  result.color = Terminal_Color.RED;
    else if (green)                result.color = Terminal_Color.GREEN;
    else if (blue)                 result.color = Terminal_Color.BLUE;
    else                           result.color = Terminal_Color.BLACK;

    result.bold = (:bool)(info.wAttributes & FOREGROUND_INTENSITY);

    return result;
}

set_terminal_state :: (new_state: Terminal_State)
{
    terminal_handle := GetStdHandle(STD_OUTPUT_HANDLE);
    new_attribs : WORD = 0;
    
    red := false;
    green := false;
    blue := false;

    using Terminal_Color;

    switch (new_state.color)
    {
        case WHITE: { red = true; green = true; blue = true; }
        case YELLOW: { red = true; green = true; }
        case PURPLE: { red = true; blue = true; }
        case CYAN: { green = true; blue = true; }
        case RED: { red = true; }
        case GREEN: { green = true; }
        case BLUE: { blue = true; }
        case BLACK: { }
        default: assert(false);
    }

    if (red)   new_attribs = new_attribs | FOREGROUND_RED;     
    if (green) new_attribs = new_attribs | FOREGROUND_GREEN;     
    if (blue)  new_attribs = new_attribs | FOREGROUND_BLUE;     

    if (new_state.bold) new_attribs = new_attribs | FOREGROUND_INTENSITY;

    info : CONSOLE_SCREEN_BUFFER_INFO;
    r := GetConsoleScreenBufferInfo(terminal_handle, *info);
    assert(r);

    old_attribs : WORD = info.wAttributes & ~(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE |
                                              FOREGROUND_INTENSITY);
    new_attribs = old_attribs | new_attribs;
    SetConsoleTextAttribute(terminal_handle, new_attribs);  
}

set_terminal_color :: (new_color: Terminal_Color, bold: bool)
{
    state := get_terminal_state();
    state.color = new_color;
    state.bold = bold;
    set_terminal_state(state);
}

get_page_size :: () -> s64
{
    info : SYSTEM_INFO;
    GetSystemInfo(*info);
    return info.dwPageSize;
}

alloc_aligned :: (alignment: s64, size: s64) -> *void
{
    result := _aligned_malloc((:u64)size, (:u64)alignment);
    assert(result);
    return result;
}

free_aligned :: (ptr: *void) 
{
    _aligned_free(ptr);
}

__zodiac_start_thread :: (_thread_start_info: *void) -> DWORD 
{
    thread_start_info := (:*Thread_Start_Info)_thread_start_info;

    _thread.atomic_cond_wait(*thread_start_info.signal_started, null);
    thread_func := thread_start_info.thread_routine;
    thread := thread_start_info.thread;
    _thread.atomic_cond_signal(*thread_start_info.signal_thread_copied);

    // return null;
    ret_val := thread_func(*thread);
    return (:DWORD)ret_val;
}

_create_thread :: (start_info: Thread_Start_Info) -> bool
{
    win_handle := CreateThread(null, 0,  *__zodiac_start_thread, *start_info, 0, null);
    if (!win_handle) return false;

    start_info.thread.handle = (:u64)win_handle;
    return true;
}

_join_thread :: (thread: Thread) -> *void
{
    handle := (:HANDLE)thread.handle
    WaitForSingleObject(handle, (:u32)INFINITE);

    ret_val: u32;
    if (!GetExitCodeThread(handle, *ret_val))
    {
        assert(false);
    } 

    close_ret := CloseHandle(handle);
    assert(close_ret);

    return (:*void) ret_val;
}
