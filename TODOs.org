
 - normal types are not pushed in the per module type table. (only pointer and array types?)
 - modules
 - structs 

* Pointers [1/4]
   - [X] Basic pointers
   - [ ] Pointer math
   - [ ] Member expressions on pointers
   - [ ] String type
     
* Foreign functions [5/5]
   - [X] Call via dyncall/load
   - [X] Store a table with information about foreign functions in the stack program
   - [X] Load this table in the vm, and attempt to load the foreign functions with dynload
   - [X] Stack command for pushing arguments for foreign functions
   - [X] Varargs functions
    
* Statements [2/6]
   - [X] While
   - [X] For
   - [ ] Switch
   - [ ] break
   - [ ] defer

* IR [1/12]
   - [X] Argument count should be an argument for function calls
   - [ ] Make assignment statements for array literals more efficient by not using an intermediary array
   - [ ] Handle pointer offsets the same way as we do for static arrays
   - [ ] Cleanup the gendata situation
   - [ ] Cleanup lvalue expression generation
   - [ ] Use atoms where possible
   - [ ] Make block names unique with a counter
   - [ ] Free list for blocks (We don't have any free ones right now?
   - [ ] Manage stack frame memory
   - [ ] Prevent functions with the same name
   - [ ] Emit the number of argument for function calls as a u64 instead of a s64
          This is done with s64 right now because that's the only literal type we
          have. 
   - [ ] Validator [0/4]
     - [ ] Check assignment types
     - [ ] Check function aruguments in the validator
     - [ ] Check function return types in the validator
     - [ ] Check jumps in the validator
    
* Atoms [1/3]
   - [X] Store strings in the table(/arena)
   - [ ] Store the array of atoms in the table 
   - [ ] Hash strings

* Resolver [2/2]
  - [X] Check type of return expression agains function decl
  - [X] Probably move (builtin) type declarations to global/module scope
    
* Lexer [2/2]
 - [X] String literal escape characters
 - [X] Char literal escape characters
