
Declaration = Ident ':' Type_Spec? (Constant_Declaration | Mutable_Declaration)

Constant_Declaration = ':' (Function_Prototype (Block_Statement | ';'))

Function_Prototype = '(' Func_Proto_Args? ')' ('->' Type_Spec)? 

Mutable_Declaration = ('=' Expression)?  ';'

Statement = Block_Statement |
            Declaration_Statement |
            Assign_Statement |
            Return_Statement;

Block_Statement = '{' (Statement*)? '}'
Declaration_Statement = Declaration
Assign_statement = LValue '=' Expression;
Return_Statement = 'return' Expression? ';'

Expression = Ternary_Expression

Identifier_Expression = Ident

Ternary_Expression = Or_Or_Expression
Or_Or_Expression = And_And_Expression
And_And_Expression = Or_Expression
Or_Expression = Cmp_Expression
Cmp_Expression = Add_Expression
Add_Expression = Mul_Expression (ADD_OP Mul_Expression)?
Mul_Expression = Unary_Expression (MUL_OP Unary_Expression)?
Unary_Expression = (UNARY_OP Unary_Expression) | Base_Expression
Base_Expression = Ident | Call_Expression | Literal_Expression
Call_Expression = Ident ( '(' Call_Arguments? ')' )?
Call_Arguments = Expression (',' Expression)*
Literal_Expression = [0-9]([0-9]*)?

ADD_OP = '+' | '-'
MUL_OP = '*' | '/'

Type_Spec = Ident

// Arrays, option 1, required new type of value (IRV)
// t5 is a pointer to the first element
t0 = LOAD_LIT lit(11);
t1 = LOAD_LIT lit(22);
t2 = LOAD_LIT lit(33);
t3 = LOAD_LIT lit(44);
t4 = LOAD_LIT lit(55);

t5 = ARRAY { t0, t1, t2, t3, t4 };


// Arrays option 2
t0 = BEGIN_ARRAY 5;
     ARRAY_ELEMENT lit(11);
     ARRAY_ELEMENT lit(22;
     ARRAY_ELEMENT lit(33);
     ARRAY_ELEMENT lit(44);
     ARRAY_ELEMENT lit(55);

// Arrays option 3
t0 = BEGIN_ARRAY;
     ARRAY_ELEMENT lit(11);
     ARRAY_ELEMENT lit(22;
     ARRAY_ELEMENT lit(33);
     ARRAY_ELEMENT lit(44);
     ARRAY_ELEMENT lit(55);

